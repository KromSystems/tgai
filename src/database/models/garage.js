const database = require('../connection');

/**
 * Garage Model
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –≤ –≥–∞—Ä–∞–∂–µ —Å–µ–º—å–∏
 */
class Garage {
    constructor(data = {}) {
        this.car_id = data.car_id || null;
        this.car_name = data.car_name || null;
        this.status = data.status || '–•–æ—Ä–æ—à–µ–µ';
        this.last_maintenance = data.last_maintenance || null;
        this.created_at = data.created_at || null;
        this.updated_at = data.updated_at || null;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
     * @returns {Promise<Array<Garage>>}
     */
    static async getAllCars() {
        const sql = 'SELECT * FROM garage ORDER BY car_id ASC';
        try {
            const rows = await database.all(sql);
            return rows.map(row => new Garage(row));
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`);
        }
    }

    /**
     * –ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Garage|null>}
     */
    static async findById(carId) {
        const sql = 'SELECT * FROM garage WHERE car_id = ?';
        try {
            const row = await database.get(sql, [carId]);
            return row ? new Garage(row) : null;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
     * @param {number} pageSize - –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    static async getCarsPaginated(page = 0, pageSize = 5) {
        const offset = page * pageSize;
        const sql = 'SELECT * FROM garage ORDER BY car_id ASC LIMIT ? OFFSET ?';
        const countSql = 'SELECT COUNT(*) as total FROM garage';

        try {
            const [rows, countResult] = await Promise.all([
                database.all(sql, [pageSize, offset]),
                database.get(countSql)
            ]);

            const cars = rows.map(row => new Garage(row));
            const total = countResult.total;
            const totalPages = Math.ceil(total / pageSize);

            return {
                cars,
                pagination: {
                    currentPage: page,
                    pageSize,
                    total,
                    totalPages,
                    hasNext: page < totalPages - 1,
                    hasPrev: page > 0
                }
            };
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: ${error.message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ('–°—Ä–µ–¥–Ω–µ–µ', '–•–æ—Ä–æ—à–µ–µ', '–ü–ª–æ—Ö–æ–µ')
     * @returns {Promise<void>}
     */
    static async updateStatus(carId, status) {
        const validStatuses = ['–°—Ä–µ–¥–Ω–µ–µ', '–•–æ—Ä–æ—à–µ–µ', '–ü–ª–æ—Ö–æ–µ'];
        if (!validStatuses.includes(status)) {
            throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${status}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${validStatuses.join(', ')}`);
        }

        const sql = `
            UPDATE garage 
            SET status = ?, last_maintenance = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
            WHERE car_id = ?
        `;

        try {
            const result = await database.run(sql, [status, carId]);
            if (result.changes === 0) {
                throw new Error(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å ID ${carId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @returns {Promise<Array<Garage>>}
     */
    static async getByStatus(status) {
        const sql = 'SELECT * FROM garage WHERE status = ? ORDER BY car_id ASC';
        try {
            const rows = await database.all(sql, [status]);
            return rows.map(row => new Garage(row));
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     * @returns {Promise<Object>}
     */
    static async getStatistics() {
        const sql = `
            SELECT 
                status,
                COUNT(*) as count
            FROM garage 
            GROUP BY status
        `;

        try {
            const rows = await database.all(sql);
            const stats = {
                '–•–æ—Ä–æ—à–µ–µ': 0,
                '–°—Ä–µ–¥–Ω–µ–µ': 0,
                '–ü–ª–æ—Ö–æ–µ': 0,
                total: 0
            };

            rows.forEach(row => {
                stats[row.status] = row.count;
                stats.total += row.count;
            });

            return stats;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∏–≥—Ä–∞—Ü–∏–∏)
     * @returns {Promise<void>}
     */
    static async initializeDefaultCars() {
        const defaultCars = [
            { car_id: 1, car_name: 'Infernus', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 2, car_name: 'Cheetah', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 3, car_name: 'Banshee', status: '–ü–ª–æ—Ö–æ–µ' },
            { car_id: 4, car_name: 'Bullet', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 5, car_name: 'Turismo', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 6, car_name: 'ZR-350', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 7, car_name: 'Jester', status: '–ü–ª–æ—Ö–æ–µ' },
            { car_id: 8, car_name: 'Sultan', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 9, car_name: 'Elegy', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 10, car_name: 'Uranus', status: '–ü–ª–æ—Ö–æ–µ' },
            { car_id: 11, car_name: 'Phoenix', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 12, car_name: 'Comet', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 13, car_name: 'Buffalo', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 14, car_name: 'Feltzer', status: '–ü–ª–æ—Ö–æ–µ' },
            { car_id: 15, car_name: 'Euros', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 16, car_name: 'Flash', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 17, car_name: 'Stratum', status: '–ü–ª–æ—Ö–æ–µ' },
            { car_id: 18, car_name: 'Club', status: '–•–æ—Ä–æ—à–µ–µ' },
            { car_id: 19, car_name: 'Super GT', status: '–°—Ä–µ–¥–Ω–µ–µ' },
            { car_id: 20, car_name: 'Hotknife', status: '–ü–ª–æ—Ö–æ–µ' }
        ];

        const insertSql = `
            INSERT OR IGNORE INTO garage (car_id, car_name, status, last_maintenance) 
            VALUES (?, ?, ?, datetime('now', '-' || (ABS(RANDOM()) % 30 + 1) || ' days'))
        `;

        try {
            for (const car of defaultCars) {
                await database.run(insertSql, [car.car_id, car.car_name, car.status]);
            }
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–¥–∞–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
     * @returns {boolean}
     */
    isMaintenanceNeeded() {
        if (!this.last_maintenance) return true;
        
        const lastMaintenance = new Date(this.last_maintenance);
        const now = new Date();
        const daysSinceLastMaintenance = Math.floor((now - lastMaintenance) / (1000 * 60 * 60 * 24));
        
        // –ê–≤—Ç–æ–º–æ–±–∏–ª—é –Ω—É–∂–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 7 –¥–Ω–µ–π –∏–ª–∏ —Å—Ç–∞—Ç—É—Å "–ü–ª–æ—Ö–æ–µ"
        return daysSinceLastMaintenance > 7 || this.status === '–ü–ª–æ—Ö–æ–µ';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {string}
     */
    getStatusEmoji() {
        const statusEmojis = {
            '–•–æ—Ä–æ—à–µ–µ': 'üü¢',
            '–°—Ä–µ–¥–Ω–µ–µ': 'üü°',
            '–ü–ª–æ—Ö–æ–µ': 'üî¥'
        };
        return statusEmojis[this.status] || '‚ö™';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {string}
     */
    getDisplayName() {
        return `${this.getStatusEmoji()} ${this.car_name}: ${this.status}`;
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @returns {Promise<Garage>}
     */
    async update(updateData) {
        const allowedFields = ['car_name', 'status', 'last_maintenance'];
        const updates = [];
        const params = [];

        Object.keys(updateData).forEach(key => {
            if (allowedFields.includes(key)) {
                updates.push(`${key} = ?`);
                params.push(updateData[key]);
                this[key] = updateData[key];
            }
        });

        if (updates.length === 0) {
            return this;
        }

        updates.push('updated_at = CURRENT_TIMESTAMP');
        params.push(this.car_id);

        const sql = `UPDATE garage SET ${updates.join(', ')} WHERE car_id = ?`;

        try {
            await database.run(sql, params);
            this.updated_at = new Date().toISOString();
            return this;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (—á–µ—Ä–µ–∑ —Å–≤—è–∑—å —Å garage_requests)
     * @returns {Promise<Array>}
     */
    async getMaintenanceHistory() {
        const sql = `
            SELECT gr.*, u.first_name, u.last_name 
            FROM garage_requests gr
            JOIN users u ON gr.user_id = u.id
            WHERE gr.car_id = ? AND gr.payment_status = '–ü—Ä–∏–Ω—è—Ç–æ'
            ORDER BY gr.processed_at DESC
        `;

        try {
            const rows = await database.all(sql, [this.car_id]);
            return rows;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: ${error.message}`);
        }
    }
}

module.exports = Garage;