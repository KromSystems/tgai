const Garage = require('../database/models/garage');
const GarageRequest = require('../database/models/garageRequest');

/**
 * CarManager - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –≤ –≥–∞—Ä–∞–∂–µ
 */
class CarManager {
    constructor() {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        this.STATUS_PRIORITIES = {
            '–ü–ª–æ—Ö–æ–µ': 3,
            '–°—Ä–µ–¥–Ω–µ–µ': 2,
            '–•–æ—Ä–æ—à–µ–µ': 1
        };

        this.STATUS_COLORS = {
            '–ü–ª–æ—Ö–æ–µ': 'üî¥',
            '–°—Ä–µ–¥–Ω–µ–µ': 'üü°',
            '–•–æ—Ä–æ—à–µ–µ': 'üü¢'
        };

        this.MAINTENANCE_RECOMMENDATIONS = {
            '–ü–ª–æ—Ö–æ–µ': '–°—Ä–æ—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞!',
            '–°—Ä–µ–¥–Ω–µ–µ': '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
            '–•–æ—Ä–æ—à–µ–µ': '–°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å–ª–∞ —Ö–æ—Ä–æ—à–µ–µ'
        };
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
     * @returns {Promise<Array<Garage>>}
     */
    async getAllCars() {
        try {
            return await Garage.getAllCars();
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ ID
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Garage|null>}
     */
    async getCarById(carId) {
        try {
            return await Garage.findById(carId);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param {number} pageSize - –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @returns {Promise<Object>}
     */
    async getCarsPaginated(page = 0, pageSize = 5) {
        try {
            return await Garage.getCarsPaginated(page, pageSize);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π: ${error.message}`);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @returns {Promise<void>}
     */
    async updateCarStatus(carId, status) {
        try {
            await Garage.updateStatus(carId, status);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @returns {Promise<Array<Garage>>}
     */
    async getCarsByStatus(status) {
        try {
            return await Garage.getByStatus(status);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å—É: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –Ω—É–∂–¥–∞—é—â–∏–µ—Å—è –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏
     * @returns {Promise<Array<Object>>}
     */
    async getCarsNeedingMaintenance() {
        try {
            const allCars = await this.getAllCars();
            const needMaintenance = [];

            for (const car of allCars) {
                if (car.isMaintenanceNeeded()) {
                    const priority = this.getMaintenancePriority(car);
                    needMaintenance.push({
                        car,
                        priority,
                        recommendation: this.MAINTENANCE_RECOMMENDATIONS[car.status],
                        urgency: this.getUrgencyLevel(car)
                    });
                }
            }

            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (—Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            return needMaintenance.sort((a, b) => b.priority - a.priority);
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Garage} car - –ê–≤—Ç–æ–º–æ–±–∏–ª—å
     * @returns {number}
     */
    getMaintenancePriority(car) {
        const statusPriority = this.STATUS_PRIORITIES[car.status] || 0;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
        let timePriority = 0;
        if (car.last_maintenance) {
            const lastMaintenance = new Date(car.last_maintenance);
            const now = new Date();
            const daysSinceLastMaintenance = Math.floor((now - lastMaintenance) / (1000 * 60 * 60 * 24));
            
            if (daysSinceLastMaintenance > 30) timePriority = 3;
            else if (daysSinceLastMaintenance > 14) timePriority = 2;
            else if (daysSinceLastMaintenance > 7) timePriority = 1;
        } else {
            timePriority = 3; // –ï—Å–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–ª—Å—è
        }

        return statusPriority + timePriority;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
     * @param {Garage} car - –ê–≤—Ç–æ–º–æ–±–∏–ª—å
     * @returns {string}
     */
    getUrgencyLevel(car) {
        const priority = this.getMaintenancePriority(car);
        
        if (priority >= 5) return '–ö—Ä–∏—Ç–∏—á–Ω–æ';
        if (priority >= 3) return '–í—ã—Å–æ–∫–∏–π';
        if (priority >= 2) return '–°—Ä–µ–¥–Ω–∏–π';
        return '–ù–∏–∑–∫–∏–π';
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     * @returns {Promise<Object>}
     */
    async getCarStatistics() {
        try {
            const stats = await Garage.getStatistics();
            const needMaintenance = await this.getCarsNeedingMaintenance();
            
            return {
                ...stats,
                needMaintenance: needMaintenance.length,
                critical: needMaintenance.filter(item => item.urgency === '–ö—Ä–∏—Ç–∏—á–Ω–æ').length,
                maintenanceRate: stats.total > 0 ? Math.round((needMaintenance.length / stats.total) * 100) : 0
            };
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        }
    }

    /**
     * –ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     * @param {string} searchTerm - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
     * @returns {Promise<Array<Garage>>}
     */
    async searchCarsByName(searchTerm) {
        try {
            const allCars = await this.getAllCars();
            const searchLower = searchTerm.toLowerCase();
            
            return allCars.filter(car => 
                car.car_name.toLowerCase().includes(searchLower)
            );
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Object>}
     */
    async getCarReport(carId) {
        try {
            const car = await this.getCarById(carId);
            if (!car) {
                throw new Error('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            const maintenanceHistory = await car.getMaintenanceHistory();
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
            const activeRequests = await GarageRequest.findByStatus('–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ');
            const carActiveRequests = activeRequests.filter(req => req.car_id === carId);

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
            const allRequests = await this.getCarRequestHistory(carId);
            const approvedRequests = allRequests.filter(req => req.payment_status === '–ü—Ä–∏–Ω—è—Ç–æ');
            const rejectedRequests = allRequests.filter(req => req.payment_status === '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ');

            return {
                car,
                status: {
                    current: car.status,
                    emoji: car.getStatusEmoji(),
                    needsMaintenance: car.isMaintenanceNeeded(),
                    urgency: this.getUrgencyLevel(car),
                    recommendation: this.MAINTENANCE_RECOMMENDATIONS[car.status]
                },
                maintenance: {
                    lastMaintenance: car.last_maintenance,
                    history: maintenanceHistory,
                    totalMaintenances: maintenanceHistory.length
                },
                requests: {
                    active: carActiveRequests,
                    total: allRequests.length,
                    approved: approvedRequests.length,
                    rejected: rejectedRequests.length,
                    approvalRate: allRequests.length > 0 ? 
                        Math.round((approvedRequests.length / allRequests.length) * 100) : 0
                }
            };
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Array>}
     */
    async getCarRequestHistory(carId) {
        try {
            // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥ –≤ –º–æ–¥–µ–ª–∏ GarageRequest
            const sql = `
                SELECT gr.*, u.first_name, u.last_name, u.username
                FROM garage_requests gr
                JOIN users u ON gr.user_id = u.id
                WHERE gr.car_id = ?
                ORDER BY gr.submitted_at DESC
            `;
            
            const database = require('../database/connection');
            const rows = await database.all(sql, [carId]);
            return rows;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Array<string>>}
     */
    async getCarRecommendations(carId) {
        try {
            const car = await this.getCarById(carId);
            if (!car) {
                return [];
            }

            const recommendations = [];
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (car.status === '–ü–ª–æ—Ö–æ–µ') {
                recommendations.push('üö® –°—Ä–æ—á–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞');
                recommendations.push('‚ö†Ô∏è –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –±–µ–∑ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
            } else if (car.status === '–°—Ä–µ–¥–Ω–µ–µ') {
                recommendations.push('‚ö° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏');
                recommendations.push('üìä –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å–ª–∞');
            } else {
                recommendations.push('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—Å–ª–∞ —Ö–æ—Ä–æ—à–µ–µ');
                recommendations.push('üìÖ –ü–ª–∞–Ω–æ–≤–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 7-10 –¥–Ω–µ–π');
            }

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
            if (car.last_maintenance) {
                const lastMaintenance = new Date(car.last_maintenance);
                const now = new Date();
                const daysSinceLastMaintenance = Math.floor((now - lastMaintenance) / (1000 * 60 * 60 * 24));
                
                if (daysSinceLastMaintenance > 30) {
                    recommendations.push('üïê –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 30 –¥–Ω–µ–π —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
                } else if (daysSinceLastMaintenance > 14) {
                    recommendations.push('üïê –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 –Ω–µ–¥–µ–ª—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è');
                }
            } else {
                recommendations.push('‚ùì –ê–≤—Ç–æ–º–æ–±–∏–ª—å –µ—â—ë –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–ª—Å—è');
            }

            return recommendations;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—è–≤–æ–∫
     * @param {number} limit - –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * @returns {Promise<Array>}
     */
    async getTopCarsByRequests(limit = 5) {
        try {
            const sql = `
                SELECT 
                    g.car_id,
                    g.car_name,
                    g.status,
                    COUNT(gr.id) as request_count,
                    COUNT(CASE WHEN gr.payment_status = '–ü—Ä–∏–Ω—è—Ç–æ' THEN 1 END) as approved_count
                FROM garage g
                LEFT JOIN garage_requests gr ON g.car_id = gr.car_id
                GROUP BY g.car_id, g.car_name, g.status
                ORDER BY request_count DESC
                LIMIT ?
            `;
            
            const database = require('../database/connection');
            const rows = await database.all(sql, [limit]);
            
            return rows.map(row => ({
                car_id: row.car_id,
                car_name: row.car_name,
                status: row.status,
                request_count: row.request_count,
                approved_count: row.approved_count,
                approval_rate: row.request_count > 0 ? 
                    Math.round((row.approved_count / row.request_count) * 100) : 0
            }));
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ${error.message}`);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Promise<Object>}
     */
    async canSubmitRequest(carId, userId) {
        try {
            const car = await this.getCarById(carId);
            if (!car) {
                return {
                    allowed: false,
                    reason: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞
            const existingRequest = await GarageRequest.findByUserAndCar(userId, carId, '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ');
            if (existingRequest) {
                return {
                    allowed: false,
                    reason: '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
            if (!car.isMaintenanceNeeded()) {
                return {
                    allowed: true,
                    warning: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É'
                };
            }

            return {
                allowed: true,
                message: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏'
            };
        } catch (error) {
            return {
                allowed: false,
                reason: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`
            };
        }
    }
}

module.exports = CarManager;