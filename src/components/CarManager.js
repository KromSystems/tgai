const Garage = require('../database/models/garage');
const User = require('../database/models/user');
const GarageRequest = require('../database/models/garageRequest');

/**
 * CarManager - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –≤ –≥–∞—Ä–∞–∂–µ
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /garage_admin –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
class CarManager {
    constructor(bot, adminIds) {
        this.bot = bot;
        this.adminIds = Array.isArray(adminIds) ? adminIds : [adminIds];
        this.adminSessions = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        this.SESSION_TIMEOUT = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.ADMIN_STATES = {
            AWAITING_CAR_NAME: 'admin_awaiting_car_name',
            AWAITING_NEW_CAR_NAME: 'admin_awaiting_new_car_name',
            CONFIRMING_DELETE: 'admin_confirming_delete'
        };

        // –°–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        this.ADMIN_MESSAGES = {
            ACCESS_DENIED: '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.',
            MAIN_MENU: 'üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ì–ê–†–ê–ñ–ê',
            CAR_ADDED: '‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
            CAR_DELETED: 'üóëÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å "{name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
            STATUS_UPDATED: '‚úÖ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è "{name}" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}',
            NAME_UPDATED: '‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ "{name}"',
            ENTER_CAR_NAME: 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
            SELECT_STATUS: 'üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:',
            CONFIRM_DELETE: '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å "{name}"?',
            ENTER_NEW_NAME: 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è "{name}":',
            CAR_NOT_FOUND: '‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
            ERROR_OCCURRED: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}'
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        setInterval(() => this.cleanupExpiredSessions(), 5 * 60 * 1000);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
     * @returns {boolean}
     */
    isAdmin(telegramId) {
        return this.adminIds.includes(telegramId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /garage_admin
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
     */
    async handleGarageAdminCommand(msg) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (!this.isAdmin(telegramId)) {
                await this.bot.sendMessage(chatId, this.ADMIN_MESSAGES.ACCESS_DENIED);
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await this.showAdminMenu(chatId);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /garage_admin:', error);
            await this.bot.sendMessage(chatId, 
                this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            );
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
     * @param {number} chatId - ID —á–∞—Ç–∞
     */
    async showAdminMenu(chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await Garage.getStatistics();
            const pendingRequests = await GarageRequest.countByStatus('–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ');

            const messageText = 
                `${this.ADMIN_MESSAGES.MAIN_MENU}\n\n` +
                `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.total} –º–∞—à–∏–Ω\n` +
                `üü¢ –•–æ—Ä–æ—à–µ–µ: ${stats['–•–æ—Ä–æ—à–µ–µ']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n` +
                `üü° –°—Ä–µ–¥–Ω–µ–µ: ${stats['–°—Ä–µ–¥–Ω–µ–µ']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n` +
                `üî¥ –ü–ª–æ—Ö–æ–µ: ${stats['–ü–ª–æ—Ö–æ–µ']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n` +
                `üìã –ó–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏: ${pendingRequests}`;

            const keyboard = this.buildAdminKeyboard(pendingRequests);

            await this.bot.sendMessage(chatId, messageText, {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:', error);
            throw error;
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} pendingRequests - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
     * @returns {Array} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    buildAdminKeyboard(pendingRequests = 0) {
        const requestText = pendingRequests > 0 
            ? `üìã –ó–∞—è–≤–∫–∏ (${pendingRequests})` 
            : 'üìã –ó–∞—è–≤–∫–∏';

        return [
            [
                { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' },
                { text: 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', callback_data: 'admin_manage' }
            ],
            [
                { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'admin_add_car' },
                { text: requestText, callback_data: 'admin_requests' }
            ],
            [
                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'back_to_main' }
            ]
        ];
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     */
    async showCarManagement(chatId, page = 0, messageId = null) {
        try {
            const pageSize = 5;
            const carsData = await Garage.getCarsPaginated(page, pageSize);
            const { cars, pagination } = carsData;

            if (cars.length === 0) {
                const message = 'üöó –ì–∞—Ä–∞–∂ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.';
                const keyboard = [[
                    { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'admin_add_car' },
                    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'admin_menu' }
                ]];

                if (messageId) {
                    await this.bot.editMessageText(message, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: { inline_keyboard: keyboard }
                    });
                } else {
                    await this.bot.sendMessage(chatId, message, {
                        reply_markup: { inline_keyboard: keyboard }
                    });
                }
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            let messageText = `üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pagination.currentPage + 1}/${pagination.totalPages})\n\n`;
            
            cars.forEach((car, index) => {
                const number = pagination.currentPage * pageSize + index + 1;
                messageText += `${number}. ${car.getDisplayName()}\n`;
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            const keyboard = this.buildCarManagementKeyboard(cars, pagination);

            if (messageId) {
                await this.bot.editMessageText(messageText, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: { inline_keyboard: keyboard }
                });
            } else {
                await this.bot.sendMessage(chatId, messageText, {
                    reply_markup: { inline_keyboard: keyboard }
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
     * @param {Array} cars - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     * @param {Object} pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @returns {Array} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    buildCarManagementKeyboard(cars, pagination) {
        const keyboard = [];

        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ 2 –≤ —Ä—è–¥—É)
        for (let i = 0; i < cars.length; i += 2) {
            const row = [];
            
            const car1 = cars[i];
            row.push({
                text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å',
                callback_data: `admin_edit_${car1.car_id}`
            });

            if (i + 1 < cars.length) {
                const car2 = cars[i + 1];
                row.push({
                    text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å',
                    callback_data: `admin_edit_${car2.car_id}`
                });
            }

            keyboard.push(row);
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navRow = [];
        if (pagination.hasPrev) {
            navRow.push({
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                callback_data: `admin_manage_page_${pagination.currentPage - 1}`
            });
        }
        if (pagination.hasNext) {
            navRow.push({
                text: '‚û°Ô∏è –î–∞–ª–µ–µ',
                callback_data: `admin_manage_page_${pagination.currentPage + 1}`
            });
        }

        if (navRow.length > 0) {
            keyboard.push(navRow);
        }

        // –ù–∏–∂–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        keyboard.push([
            { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ', callback_data: 'admin_add_car' },
            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'admin_menu' }
        ]);

        return keyboard;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleCarEdit(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const carId = parseInt(callbackQuery.data.split('_')[2]);

        try {
            const car = await Garage.findById(carId);
            if (!car) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: this.ADMIN_MESSAGES.CAR_NOT_FOUND,
                    show_alert: true
                });
                return;
            }

            const messageText = 
                `üöó –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø\n\n` +
                `üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${car.car_name}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${car.getDisplayName()}\n` +
                `üîß –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û: ${car.last_maintenance ? new Date(car.last_maintenance).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

            const keyboard = [
                [
                    { text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `admin_status_${carId}` },
                    { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `admin_name_${carId}` }
                ],
                [
                    { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ', callback_data: `admin_delete_${carId}` }
                ],
                [
                    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'admin_manage' }
                ]
            ];

            await this.bot.answerCallbackQuery(callbackQuery.id);
            await this.bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: keyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
                show_alert: true
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleStatusChange(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const carId = parseInt(callbackQuery.data.split('_')[2]);

        try {
            const car = await Garage.findById(carId);
            if (!car) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: this.ADMIN_MESSAGES.CAR_NOT_FOUND,
                    show_alert: true
                });
                return;
            }

            const messageText = 
                `üé® –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${car.getDisplayName()}\n\n` +
                `–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:`;

            const keyboard = this.buildStatusKeyboard(carId);

            await this.bot.answerCallbackQuery(callbackQuery.id);
            await this.bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: keyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
                show_alert: true
            });
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Array} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    buildStatusKeyboard(carId) {
        return [
            [
                { text: 'üü¢ –•–æ—Ä–æ—à–µ–µ', callback_data: `admin_set_status_${carId}_–•–æ—Ä–æ—à–µ–µ` }
            ],
            [
                { text: 'üü° –°—Ä–µ–¥–Ω–µ–µ', callback_data: `admin_set_status_${carId}_–°—Ä–µ–¥–Ω–µ–µ` }
            ],
            [
                { text: 'üî¥ –ü–ª–æ—Ö–æ–µ', callback_data: `admin_set_status_${carId}_–ü–ª–æ—Ö–æ–µ` }
            ],
            [
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `admin_edit_${carId}` }
            ]
        ];
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleSetStatus(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const parts = callbackQuery.data.split('_');
        const carId = parseInt(parts[3]);
        const newStatus = parts[4];

        try {
            const car = await Garage.findById(carId);
            if (!car) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: this.ADMIN_MESSAGES.CAR_NOT_FOUND,
                    show_alert: true
                });
                return;
            }

            await Garage.updateStatus(carId, newStatus);

            const successMessage = this.ADMIN_MESSAGES.STATUS_UPDATED
                .replace('{name}', car.car_name)
                .replace('{status}', newStatus);

            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: successMessage,
                show_alert: false
            });

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            const updatedCar = await Garage.findById(carId);
            const messageText = 
                `üöó –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø\n\n` +
                `üìõ –ù–∞–∑–≤–∞–Ω–∏–µ: ${updatedCar.car_name}\n` +
                `üìä –°—Ç–∞—Ç—É—Å: ${updatedCar.getDisplayName()}\n` +
                `üîß –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û: ${updatedCar.last_maintenance ? new Date(updatedCar.last_maintenance).toLocaleDateString() : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

            const keyboard = [
                [
                    { text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: `admin_status_${carId}` },
                    { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `admin_name_${carId}` }
                ],
                [
                    { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ', callback_data: `admin_delete_${carId}` }
                ],
                [
                    { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'admin_manage' }
                ]
            ];

            await this.bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: keyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', error.message),
                show_alert: true
            });
        }
    }

    /**
     * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleAddCar(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const telegramId = callbackQuery.from.id;

        try {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            this.setAdminSession(telegramId, {
                state: this.ADMIN_STATES.AWAITING_CAR_NAME,
                messageId: callbackQuery.message.message_id
            });

            await this.bot.answerCallbackQuery(callbackQuery.id);
            await this.bot.editMessageText(this.ADMIN_MESSAGES.ENTER_CAR_NAME, {
                chat_id: chatId,
                message_id: callbackQuery.message.message_id,
                reply_markup: {
                    inline_keyboard: [[
                        { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_menu' }
                    ]]
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
                show_alert: true
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
     */
    async processNewCarName(msg) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;
        const carName = msg.text.trim();

        try {
            const session = this.getAdminSession(telegramId);
            if (!session || session.state !== this.ADMIN_STATES.AWAITING_CAR_NAME) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
            if (!carName || carName.length === 0) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
                return;
            }

            if (carName.length > 50) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            this.setAdminSession(telegramId, {
                ...session,
                carName: carName,
                state: 'awaiting_status_selection'
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
            const messageText = 
                `${this.ADMIN_MESSAGES.SELECT_STATUS}\n\n` +
                `üöó –ù–∞–∑–≤–∞–Ω–∏–µ: ${carName}`;

            const keyboard = [
                [
                    { text: 'üü¢ –•–æ—Ä–æ—à–µ–µ', callback_data: `admin_create_car_–•–æ—Ä–æ—à–µ–µ` }
                ],
                [
                    { text: 'üü° –°—Ä–µ–¥–Ω–µ–µ', callback_data: `admin_create_car_–°—Ä–µ–¥–Ω–µ–µ` }
                ],
                [
                    { text: 'üî¥ –ü–ª–æ—Ö–æ–µ', callback_data: `admin_create_car_–ü–ª–æ—Ö–æ–µ` }
                ],
                [
                    { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_menu' }
                ]
            ];

            // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try {
                await this.bot.deleteMessage(chatId, session.messageId);
            } catch (deleteError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            }

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await this.bot.deleteMessage(chatId, msg.message_id);
            } catch (deleteError) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            }

            await this.bot.sendMessage(chatId, messageText, {
                reply_markup: { inline_keyboard: keyboard }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await this.bot.sendMessage(chatId, 
                this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ')
            );
            this.clearAdminSession(telegramId);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleCreateCar(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const telegramId = callbackQuery.from.id;
        const status = callbackQuery.data.split('_')[3];

        try {
            const session = this.getAdminSession(telegramId);
            if (!session || !session.carName) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.',
                    show_alert: true
                });
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            const newCar = await Garage.addCar(session.carName, status);

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            this.clearAdminSession(telegramId);

            const successMessage = this.ADMIN_MESSAGES.CAR_ADDED.replace('{name}', session.carName);

            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: successMessage,
                show_alert: false
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await this.showAdminMenu(chatId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', error.message),
                show_alert: true
            });
            this.clearAdminSession(telegramId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ callback queries –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleAdminCallback(callbackQuery) {
        const data = callbackQuery.data;
        const telegramId = callbackQuery.from.id;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if (!this.isAdmin(telegramId)) {
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ACCESS_DENIED,
                show_alert: true
            });
            return;
        }

        try {
            // –†–æ—É—Ç–∏–Ω–≥ callback queries
            if (data === 'admin_menu') {
                await this.bot.answerCallbackQuery(callbackQuery.id);
                await this.showAdminMenu(callbackQuery.message.chat.id);
            } else if (data === 'admin_manage') {
                await this.bot.answerCallbackQuery(callbackQuery.id);
                await this.showCarManagement(callbackQuery.message.chat.id, 0, callbackQuery.message.message_id);
            } else if (data.startsWith('admin_manage_page_')) {
                const page = parseInt(data.split('_')[3]);
                await this.bot.answerCallbackQuery(callbackQuery.id);
                await this.showCarManagement(callbackQuery.message.chat.id, page, callbackQuery.message.message_id);
            } else if (data.startsWith('admin_edit_')) {
                await this.handleCarEdit(callbackQuery);
            } else if (data.startsWith('admin_status_')) {
                await this.handleStatusChange(callbackQuery);
            } else if (data.startsWith('admin_set_status_')) {
                await this.handleSetStatus(callbackQuery);
            } else if (data === 'admin_add_car') {
                await this.handleAddCar(callbackQuery);
            } else if (data.startsWith('admin_create_car_')) {
                await this.handleCreateCar(callbackQuery);
            } else {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
                await this.bot.answerCallbackQuery(callbackQuery.id);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ admin callback:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: this.ADMIN_MESSAGES.ERROR_OCCURRED.replace('{error}', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'),
                show_alert: true
            });
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} telegramId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {Object} sessionData - –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    setAdminSession(telegramId, sessionData) {
        this.adminSessions.set(telegramId, {
            ...sessionData,
            startTime: Date.now()
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} telegramId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object|null}
     */
    getAdminSession(telegramId) {
        return this.adminSessions.get(telegramId) || null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} telegramId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    clearAdminSession(telegramId) {
        this.adminSessions.delete(telegramId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
     */
    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [telegramId, session] of this.adminSessions.entries()) {
            if (now - session.startTime > this.SESSION_TIMEOUT) {
                this.adminSessions.delete(telegramId);
                console.log(`–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            }
        }
    }
}

module.exports = CarManager;