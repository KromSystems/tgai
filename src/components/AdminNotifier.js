const GarageRequest = require('../database/models/garageRequest');
const RequestProcessor = require('./RequestProcessor');

/**
 * AdminNotifier - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
 */
class AdminNotifier {
    constructor(bot, adminId) {
        this.bot = bot;
        this.adminId = adminId;
        this.requestProcessor = new RequestProcessor();
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        this.adminSessions = new Map();
        this.SESSION_TIMEOUT = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        setInterval(() => this.cleanupExpiredSessions(), 2 * 60 * 1000);
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
     * @param {GarageRequest} request - –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
     */
    async notifyNewRequest(request) {
        try {
            const [car, user] = await Promise.all([
                request.getCar(),
                request.getUser()
            ]);

            const userName = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
            const username = user.username ? `@${user.username}` : '';

            const messageText = 
                `üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #${request.id}\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} ${username}\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üìä –°—Ç–∞—Ç—É—Å –º–∞—Å–ª–∞: ${car.getDisplayName()}\n` +
                `‚è∞ –ü–æ–¥–∞–Ω–æ: ${request.getFormattedSubmissionDate()}\n` +
                `üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 3 –º–ª–Ω`;

            const keyboard = [
                [
                    {
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                        callback_data: `garage_approve_${request.id}`
                    },
                    {
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                        callback_data: `garage_reject_${request.id}`
                    }
                ],
                [
                    {
                        text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
                        callback_data: `garage_details_${request.id}`
                    }
                ]
            ];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if (request.photoExists()) {
                await this.bot.sendPhoto(this.adminId, request.photo_path, {
                    caption: messageText,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(this.adminId, messageText + '\n\n‚ùå –§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

            console.log(`üì¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ #${request.id}`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            try {
                await this.bot.sendMessage(this.adminId, 
                    `üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${request.id}\n` +
                    `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π: ${error.message}`
                );
            } catch (fallbackError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', fallbackError);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleAdminApproval(callbackQuery) {
        const requestId = parseInt(callbackQuery.data.split('_')[2]);
        const adminTelegramId = callbackQuery.from.id;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (adminTelegramId !== this.adminId) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
                    show_alert: true
                });
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const User = require('../database/models/user');
            const admin = await User.findByTelegramId(adminTelegramId);
            if (!admin) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
                    show_alert: true
                });
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            const result = await this.requestProcessor.processApproval(requestId, admin.id);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            await this.updateAdminMessage(callbackQuery, result, 'approved');

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            await this.notifyUserApproval(result);

            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!',
                show_alert: false
            });

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
            
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: `–û—à–∏–±–∫–∞: ${error.message}`,
                show_alert: true
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleAdminRejection(callbackQuery) {
        const requestId = parseInt(callbackQuery.data.split('_')[2]);
        const adminTelegramId = callbackQuery.from.id;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if (adminTelegramId !== this.adminId) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è',
                    show_alert: true
                });
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            this.setAdminSession(adminTelegramId, {
                state: 'awaiting_rejection_reason',
                requestId: requestId,
                originalMessageId: callbackQuery.message.message_id
            });

            await this.bot.answerCallbackQuery(callbackQuery.id);
            
            await this.bot.sendMessage(this.adminId, 
                `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${requestId}\n\n` +
                `üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–æ–Ω–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é):`,
                {
                    reply_markup: {
                        force_reply: true
                    }
                }
            );

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
            
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: `–û—à–∏–±–∫–∞: ${error.message}`,
                show_alert: true
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     */
    async handleRejectionReason(msg) {
        const adminTelegramId = msg.from.id;
        const reason = msg.text;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            const session = this.getAdminSession(adminTelegramId);
            if (!session || session.state !== 'awaiting_rejection_reason') {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞
            }

            const requestId = session.requestId;

            // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const User = require('../database/models/user');
            const admin = await User.findByTelegramId(adminTelegramId);
            if (!admin) {
                await this.bot.sendMessage(this.adminId, '‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                this.clearAdminSession(adminTelegramId);
                return;
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            const result = await this.requestProcessor.processRejection(requestId, admin.id, reason);

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            this.clearAdminSession(adminTelegramId);

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.updateAdminMessageForRejection(session.originalMessageId, result);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            await this.notifyUserRejection(result);

            await this.bot.sendMessage(this.adminId, 
                `‚úÖ –ó–∞—è–≤–∫–∞ #${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}`
            );

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
            
            await this.bot.sendMessage(this.adminId, 
                `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${error.message}`
            );
            
            this.clearAdminSession(adminTelegramId);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–∫–∏
     * @param {Object} callbackQuery - Callback query
     */
    async handleRequestDetails(callbackQuery) {
        const requestId = parseInt(callbackQuery.data.split('_')[2]);

        try {
            const request = await GarageRequest.findById(requestId);
            if (!request) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    show_alert: true
                });
                return;
            }

            const [car, user] = await Promise.all([
                request.getCar(),
                request.getUser()
            ]);

            const detailsText = 
                `üìä –ü–û–î–†–û–ë–ù–û–°–¢–ò –ó–ê–Ø–í–ö–ò #${request.id}\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n` +
                `   ‚Ä¢ –ò–º—è: ${user.first_name} ${user.last_name || ''}\n` +
                `   ‚Ä¢ Username: ${user.username ? '@' + user.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `   ‚Ä¢ Telegram ID: ${user.telegram_id}\n` +
                `   ‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${user.isAuthorized() ? '‚úÖ' : '‚ùå'}\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å:\n` +
                `   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${car.car_name}\n` +
                `   ‚Ä¢ ID: ${car.car_id}\n` +
                `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${car.getDisplayName()}\n` +
                `   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¢–û: ${car.last_maintenance ? new Date(car.last_maintenance).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
                `üìã –ó–∞—è–≤–∫–∞:\n` +
                `   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${request.getFormattedStatus()}\n` +
                `   ‚Ä¢ –ü–æ–¥–∞–Ω–∞: ${request.getFormattedSubmissionDate()}\n` +
                `   ‚Ä¢ –§–æ—Ç–æ: ${request.photoExists() ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`;

            await this.bot.answerCallbackQuery(callbackQuery.id);
            await this.bot.sendMessage(this.adminId, detailsText);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∑–∞—è–≤–∫–∏:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π',
                show_alert: true
            });
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param {Object} callbackQuery - Callback query
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ ('approved' –∏–ª–∏ 'rejected')
     */
    async updateAdminMessage(callbackQuery, result, action) {
        try {
            const { request, car, user } = result;
            const userName = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
            const username = user.username ? `@${user.username}` : '';

            const statusEmoji = action === 'approved' ? '‚úÖ' : '‚ùå';
            const statusText = action === 'approved' ? '–û–î–û–ë–†–ï–ù–ê' : '–û–¢–ö–õ–û–ù–ï–ù–ê';

            const updatedText = 
                `${statusEmoji} –ó–ê–Ø–í–ö–ê ${statusText} #${request.id}\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} ${username}\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üìä –°—Ç–∞—Ç—É—Å –º–∞—Å–ª–∞: ${car.getDisplayName()}\n` +
                `‚è∞ –ü–æ–¥–∞–Ω–æ: ${request.getFormattedSubmissionDate()}\n` +
                `‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n` +
                `üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 3 –º–ª–Ω`;

            await this.bot.editMessageCaption(updatedText, {
                chat_id: callbackQuery.message.chat.id,
                message_id: callbackQuery.message.message_id,
                reply_markup: { inline_keyboard: [] }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     */
    async updateAdminMessageForRejection(messageId, result) {
        try {
            const { request, car, user, comment } = result;
            const userName = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
            const username = user.username ? `@${user.username}` : '';

            const updatedText = 
                `‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê #${request.id}\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} ${username}\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üìä –°—Ç–∞—Ç—É—Å –º–∞—Å–ª–∞: ${car.getDisplayName()}\n` +
                `‚è∞ –ü–æ–¥–∞–Ω–æ: ${request.getFormattedSubmissionDate()}\n` +
                `‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞: ${comment}`;

            await this.bot.editMessageCaption(updatedText, {
                chat_id: this.adminId,
                message_id: messageId,
                reply_markup: { inline_keyboard: [] }
            });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è
     */
    async notifyUserApproval(result) {
        try {
            const { request, car, user } = result;

            const messageText = 
                `‚úÖ –ó–ê–Ø–í–ö–ê –û–î–û–ë–†–ï–ù–ê!\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 3 –º–ª–Ω –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã\n` +
                `üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${request.id}\n\n` +
                `üí∏ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞...\n` +
                `–°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`;

            await this.bot.sendMessage(user.telegram_id, messageText);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', error);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     */
    async notifyUserRejection(result) {
        try {
            const { request, car, user, comment } = result;

            const messageText = 
                `‚ùå –ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${request.id}\n\n` +
                `üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:\n${comment}\n\n` +
                `üí° –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å —É—á–µ—Ç–æ–º –∑–∞–º–µ—á–∞–Ω–∏–π.`;

            await this.bot.sendMessage(user.telegram_id, messageText);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:', error);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {Object} sessionData - –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    setAdminSession(adminId, sessionData) {
        this.adminSessions.set(adminId, {
            ...sessionData,
            startTime: Date.now()
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Object|null}
     */
    getAdminSession(adminId) {
        return this.adminSessions.get(adminId) || null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {number} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    clearAdminSession(adminId) {
        this.adminSessions.delete(adminId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
     */
    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [adminId, session] of this.adminSessions.entries()) {
            if (now - session.startTime > this.SESSION_TIMEOUT) {
                this.adminSessions.delete(adminId);
                console.log(`–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è –∞–¥–º–∏–Ω-—Å–µ—Å—Å–∏—è –¥–ª—è ${adminId}`);
            }
        }
    }
}

module.exports = AdminNotifier;