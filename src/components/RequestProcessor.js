const GarageRequest = require('../database/models/garageRequest');
const Garage = require('../database/models/garage');
const User = require('../database/models/user');

/**
 * RequestProcessor - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É –º–∞—Å–ª–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */
class RequestProcessor {
    constructor() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º–∞
        this.SPAM_LIMITS = {
            HOURLY_LIMIT: 3,           // 3 –∑–∞—è–≤–∫–∏ –≤ —á–∞—Å
            DAILY_LIMIT: 10,           // 10 –∑–∞—è–≤–æ–∫ –≤ –¥–µ–Ω—å
            PER_CAR_DAILY_LIMIT: 2     // 2 –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–¥–∏–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –¥–µ–Ω—å
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã–ø–ª–∞—Ç
        this.PAYMENT_SETTINGS = {
            REWARD_AMOUNT: 3000000,    // 3 –º–ª–Ω –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã
            AUTO_PAYMENT_DELAY: 5000   // 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–æ–π
        };

        // –í–∞–ª–∏–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
        this.VALID_STATUSES = ['–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ', '–ü—Ä–∏–Ω—è—Ç–æ', '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞'];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
     * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
     * @returns {Promise<GarageRequest>}
     */
    async createRequest(requestData) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await this.validateRequestData(requestData);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º –ª–∏–º–∏—Ç–æ–≤
            await this.validateSpamLimits(requestData.telegram_id, requestData.car_id);

            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            const newRequest = await GarageRequest.create(requestData);

            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #${newRequest.id} –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${requestData.car_id}`);
            return newRequest;

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {number} requestId - ID –∑–∞—è–≤–∫–∏
     * @param {number} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @returns {Promise<Object>}
     */
    async processApproval(requestId, adminId) {
        try {
            const request = await GarageRequest.findById(requestId);
            if (!request) {
                throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (request.payment_status !== '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ') {
                throw new Error(`–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: ${request.payment_status}`);
            }

            // –û–¥–æ–±—Ä—è–µ–º –∑–∞—è–≤–∫—É (—ç—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è)
            await request.approve(adminId);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞"
            await request.updatePaymentStatus('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞');

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const [car, user] = await Promise.all([
                request.getCar(),
                request.getUser()
            ]);

            console.log(`‚úÖ –ó–∞—è–≤–∫–∞ #${requestId} –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminId}`);

            return {
                success: true,
                request,
                car,
                user,
                message: '–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–ª–∞—Ç—ã.'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     * @param {number} requestId - ID –∑–∞—è–≤–∫–∏
     * @param {number} adminId - ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     * @param {string} comment - –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
     * @returns {Promise<Object>}
     */
    async processRejection(requestId, adminId, comment) {
        try {
            const request = await GarageRequest.findById(requestId);
            if (!request) {
                throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            if (request.payment_status !== '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ') {
                throw new Error(`–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: ${request.payment_status}`);
            }

            if (!comment || comment.trim().length === 0) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è');
            }

            // –û—Ç–∫–ª–æ–Ω—è–µ–º –∑–∞—è–≤–∫—É
            await request.reject(adminId, comment.trim());

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            const [car, user] = await Promise.all([
                request.getCar(),
                request.getUser()
            ]);

            console.log(`‚ùå –ó–∞—è–≤–∫–∞ #${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ${adminId}. –ü—Ä–∏—á–∏–Ω–∞: ${comment}`);

            return {
                success: true,
                request,
                car,
                user,
                comment: comment.trim(),
                message: '–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            };

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∏
     * @param {number} requestId - ID –∑–∞—è–≤–∫–∏
     * @param {string} status - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @returns {Promise<void>}
     */
    async updatePaymentStatus(requestId, status) {
        try {
            if (!this.VALID_STATUSES.includes(status)) {
                throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`);
            }

            const request = await GarageRequest.findById(requestId);
            if (!request) {
                throw new Error('–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }

            await request.updatePaymentStatus(status);
            
            console.log(`üí∞ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∏ #${requestId}: ${status}`);

        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–∫–∏ #${requestId}:`, error);
            throw error;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –∞–Ω—Ç–∏—Å–ø–∞–º–∞
     * @param {string} telegramId - Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     * @returns {Promise<boolean>}
     */
    async validateSpamLimits(telegramId, carId = null) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ª–∏–º–∏—Ç–∞
            const hourlyCount = await GarageRequest.countRecentByUser(telegramId, 1);
            if (hourlyCount >= this.SPAM_LIMITS.HOURLY_LIMIT) {
                throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ (${this.SPAM_LIMITS.HOURLY_LIMIT} –≤ —á–∞—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
            const dailyCount = await GarageRequest.countRecentByUser(telegramId, 24);
            if (dailyCount >= this.SPAM_LIMITS.DAILY_LIMIT) {
                throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ (${this.SPAM_LIMITS.DAILY_LIMIT} –≤ –¥–µ–Ω—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.`);
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            if (carId) {
                const user = await User.findByTelegramId(parseInt(telegramId));
                if (user) {
                    const carDailyCount = await this.countUserCarRequests(user.id, carId, 24);
                    if (carDailyCount >= this.SPAM_LIMITS.PER_CAR_DAILY_LIMIT) {
                        throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (${this.SPAM_LIMITS.PER_CAR_DAILY_LIMIT} –≤ –¥–µ–Ω—å).`);
                    }
                }
            }

            return true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω—Ç–∏—Å–ø–∞–º –ª–∏–º–∏—Ç–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
     * @returns {Promise<number>}
     */
    async countUserCarRequests(userId, carId, hours) {
        try {
            const sql = `
                SELECT COUNT(*) as count 
                FROM garage_requests 
                WHERE user_id = ? AND car_id = ? 
                AND submitted_at > datetime('now', '-${hours} hours')
            `;
            
            const database = require('../database/connection');
            const result = await database.get(sql, [userId, carId]);
            return result.count || 0;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
     * @param {Object} requestData - –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
     * @returns {Promise<void>}
     */
    async validateRequestData(requestData) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if (!requestData.car_id) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è');
            }

            if (!requestData.user_id) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }

            if (!requestData.telegram_id) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω Telegram ID');
            }

            if (!requestData.photo_path) {
                throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            const car = await Garage.findById(requestData.car_id);
            if (!car) {
                throw new Error('–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await User.findById(requestData.user_id);
            if (!user) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!user.isAuthorized()) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            const fs = require('fs');
            if (!fs.existsSync(requestData.photo_path)) {
                throw new Error('–§–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫
     * @param {Object} options - –û–ø—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
     * @returns {Promise<Object>}
     */
    async getProcessingStatistics(options = {}) {
        try {
            const { 
                startDate = null, 
                endDate = null, 
                adminId = null 
            } = options;

            let sql = `
                SELECT 
                    payment_status,
                    COUNT(*) as count,
                    AVG(
                        CASE 
                            WHEN processed_at IS NOT NULL AND submitted_at IS NOT NULL 
                            THEN (julianday(processed_at) - julianday(submitted_at)) * 24 * 60
                            ELSE NULL 
                        END
                    ) as avg_processing_time_minutes
                FROM garage_requests 
                WHERE 1=1
            `;

            const params = [];

            if (startDate) {
                sql += ' AND submitted_at >= ?';
                params.push(startDate);
            }

            if (endDate) {
                sql += ' AND submitted_at <= ?';
                params.push(endDate);
            }

            if (adminId) {
                sql += ' AND admin_id = ?';
                params.push(adminId);
            }

            sql += ' GROUP BY payment_status';

            const database = require('../database/connection');
            const rows = await database.all(sql, params);

            const stats = {
                total: 0,
                pending: 0,
                approved: 0,
                rejected: 0,
                processing: 0,
                avgProcessingTime: 0
            };

            let totalProcessingTime = 0;
            let processedCount = 0;

            rows.forEach(row => {
                stats.total += row.count;
                
                switch (row.payment_status) {
                    case '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ':
                        stats.pending = row.count;
                        break;
                    case '–ü—Ä–∏–Ω—è—Ç–æ':
                        stats.approved = row.count;
                        if (row.avg_processing_time_minutes) {
                            totalProcessingTime += row.avg_processing_time_minutes * row.count;
                            processedCount += row.count;
                        }
                        break;
                    case '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':
                        stats.rejected = row.count;
                        if (row.avg_processing_time_minutes) {
                            totalProcessingTime += row.avg_processing_time_minutes * row.count;
                            processedCount += row.count;
                        }
                        break;
                    case '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –æ–ø–ª–∞—Ç–∞':
                        stats.processing = row.count;
                        break;
                }
            });

            stats.avgProcessingTime = processedCount > 0 ? 
                Math.round(totalProcessingTime / processedCount) : 0;

            stats.approvalRate = stats.total > 0 ? 
                Math.round((stats.approved / (stats.approved + stats.rejected)) * 100) : 0;

            return stats;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
     * @param {number} limit - –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     * @returns {Promise<Array>}
     */
    async getPendingRequests(limit = 50) {
        try {
            const requests = await GarageRequest.findPendingRequests();
            
            // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª—è—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
            const enrichedRequests = [];
            
            for (const request of requests.slice(0, limit)) {
                const [car, user] = await Promise.all([
                    request.getCar(),
                    request.getUser()
                ]);
                
                enrichedRequests.push({
                    request,
                    car,
                    user,
                    waitingTime: this.calculateWaitingTime(request.submitted_at)
                });
            }

            return enrichedRequests;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: ${error.message}`);
        }
    }

    /**
     * –í—ã—á–∏—Å–ª–∏—Ç—å –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
     * @param {string} submittedAt - –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
     * @returns {Object}
     */
    calculateWaitingTime(submittedAt) {
        const submitted = new Date(submittedAt);
        const now = new Date();
        const diffMs = now - submitted;
        
        const minutes = Math.floor(diffMs / (1000 * 60));
        const hours = Math.floor(minutes / 60);
        const days = Math.floor(hours / 24);

        return {
            totalMinutes: minutes,
            formatted: days > 0 ? `${days}–¥ ${hours % 24}—á` : 
                      hours > 0 ? `${hours}—á ${minutes % 60}–º` : 
                      `${minutes}–º`
        };
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫
     * @param {number} daysOld - –í–æ–∑—Ä–∞—Å—Ç –∑–∞—è–≤–æ–∫ –≤ –¥–Ω—è—Ö
     * @returns {Promise<number>}
     */
    async cleanupOldRequests(daysOld = 30) {
        try {
            const sql = `
                DELETE FROM garage_requests 
                WHERE (payment_status = '–ü—Ä–∏–Ω—è—Ç–æ' OR payment_status = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
                AND processed_at < datetime('now', '-${daysOld} days')
            `;

            const database = require('../database/connection');
            const result = await database.run(sql);
            
            console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.changes} —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ (—Å—Ç–∞—Ä—à–µ ${daysOld} –¥–Ω–µ–π)`);
            return result.changes;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫: ${error.message}`);
        }
    }
}

module.exports = RequestProcessor;