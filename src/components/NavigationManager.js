/**
 * NavigationManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã /help
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –∑–∞–ø—Ä–æ—Å—ã –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
 */

class NavigationManager {
    constructor(menuBuilder, userTypeDetector, contentProvider) {
        this.menuBuilder = menuBuilder;
        this.userTypeDetector = userTypeDetector;
        this.contentProvider = contentProvider;
        
        // –ö–∞—Ä—Ç–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        this.callbackHandlers = {
            // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            'help_main': this.handleMainMenu.bind(this),
            
            // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'help_admin_users': this.handleAdminUsers.bind(this),
            'help_admin_stats': this.handleAdminStats.bind(this),
            'help_admin_settings': this.handleAdminSettings.bind(this),
            'help_admin_notifications': this.handleAdminNotifications.bind(this),
            'help_admin_requests': this.handleAdminRequests.bind(this),
            'help_admin_blocks': this.handleAdminBlocks.bind(this),
            'help_admin_backup': this.handleAdminBackup.bind(this),
            
            // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            'help_admin_all_users': this.handleAdminAllUsers.bind(this),
            'help_admin_pending_requests': this.handleAdminPendingRequests.bind(this),
            'help_admin_authorized': this.handleAdminAuthorized.bind(this),
            'help_admin_blocked': this.handleAdminBlocked.bind(this),
            'help_admin_detailed_stats': this.handleAdminDetailedStats.bind(this),
            
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'help_user_profile': this.handleUserProfile.bind(this),
            'help_user_settings': this.handleUserSettings.bind(this),
            'help_user_history': this.handleUserHistory.bind(this),
            'help_user_news': this.handleUserNews.bind(this),
            'help_user_faq': this.handleUserFAQ.bind(this),
            'help_user_support': this.handleUserSupport.bind(this),
            
            // –ì–æ—Å—Ç–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'help_guest_about': this.handleGuestAbout.bind(this),
            'help_guest_rules': this.handleGuestRules.bind(this),
            'help_guest_contacts': this.handleGuestContacts.bind(this),
            'help_guest_faq': this.handleGuestFAQ.bind(this),
            'help_guest_check_request': this.handleGuestCheckRequest.bind(this),
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'help_emergency': this.handleEmergency.bind(this),
            'help_refresh': this.handleRefresh.bind(this)
        };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å callback –∑–∞–ø—Ä–æ—Å
     * @param {Object} callbackQuery - Callback query –æ–±—ä–µ–∫—Ç
     * @param {Object} user - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Function} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
     * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    async handleCallback(callbackQuery, user, bot) {
        const { data, from, message } = callbackQuery;
        const telegramId = from.id;
        
        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userType = this.userTypeDetector.detectUserType(telegramId, user);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
            const accessCheck = this.checkAccess(data, userType);
            if (!accessCheck.allowed) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: accessCheck.message,
                    show_alert: true
                });
                return false;
            }

            // –ù–∞—Ö–æ–¥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const handler = this.callbackHandlers[data];
            if (!handler) {
                await bot.answerCallbackQuery(callbackQuery.id, {
                    text: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
                    show_alert: true
                });
                return false;
            }

            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            const result = await handler(callbackQuery, user, userType, bot);
            
            // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: result.notificationText || '‚úÖ'
            });

            return true;
        } catch (error) {
            console.error('Error handling callback:', error);
            await bot.answerCallbackQuery(callbackQuery.id, {
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
                show_alert: true
            });
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏
     * @param {string} callbackData - –î–∞–Ω–Ω—ã–µ callback
     * @param {string} userType - –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
     */
    checkAccess(callbackData, userType) {
        // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (callbackData.startsWith('help_admin_') && userType !== 'admin') {
            return {
                allowed: false,
                message: 'üëë –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º'
            };
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if (callbackData.startsWith('help_user_') && userType === 'unauthorized') {
            return {
                allowed: false,
                message: 'üîí –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
            };
        }

        return { allowed: true };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     */
    async handleMainMenu(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        let menuData;
        
        switch (userType) {
            case 'admin':
                menuData = this.menuBuilder.buildAdminMenu(user);
                break;
            case 'authorized':
                menuData = this.menuBuilder.buildUserMenu(user);
                break;
            case 'unauthorized':
                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞—è–≤–∫—É
                const AuthRequest = require('../database/models/authRequest');
                const authRequest = await AuthRequest.findByTelegramId(user?.telegram_id);
                menuData = this.menuBuilder.buildGuestMenu(user, authRequest);
                break;
            default:
                throw new Error('Unknown user type');
        }

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
     */
    async handleAdminUsers(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const User = require('../database/models/user');
        const AuthRequest = require('../database/models/authRequest');
        
        const [totalUsers, authorizedUsers, pendingRequests] = await Promise.all([
            User.findAll(),
            User.findAuthorized(),
            AuthRequest.findPending()
        ]);

        const stats = {
            total: totalUsers.length,
            authorized: authorizedUsers.length,
            blocked: 0 // TODO: implement blocked users count
        };

        const menuData = this.menuBuilder.buildAdminUsersMenu(pendingRequests, stats);

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    async handleAdminStats(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const HelpMetrics = require('../database/models/helpMetrics');
        const stats = await HelpMetrics.getUsageStats();
        
        const text = `üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´

üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /help:
‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (7 –¥–Ω–µ–π): ${stats.total_usage}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${stats.avg_response_time?.toFixed(2) || 0}–º—Å

üë• –ü–æ —Ç–∏–ø–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
${stats.user_type_breakdown.map(item => 
    `‚Ä¢ ${this.userTypeDetector.getUserLevelName(item.user_type)}: ${item.count}`
).join('\n')}

üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:
${stats.popular_sections.slice(0, 5).map((item, index) => 
    `${index + 1}. ${item.menu_section}: ${item.count} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤`
).join('\n')}

üìÖ –ü–µ—Ä–∏–æ–¥: ${stats.time_range}`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'help_admin_detailed_stats' },
                    { text: 'üìà –¢—Ä–µ–Ω–¥—ã', callback_data: 'help_admin_trends' }
                ],
                [
                    { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'help_admin_stats' }
                ],
                [
                    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'help_main' }
                ]
            ]
        };

        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async handleUserProfile(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        const menuData = this.menuBuilder.buildUserProfileMenu(user);

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
     */
    async handleGuestAbout(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        const menuData = this.menuBuilder.buildAboutSystemMenu();

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–û —Å–∏—Å—Ç–µ–º–µ' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª
     */
    async handleGuestRules(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        const menuData = this.menuBuilder.buildRulesMenu();

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
     */
    async handleGuestContacts(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        const menuData = this.menuBuilder.buildContactsMenu();

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ
     */
    async handleGuestFAQ(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        const menuData = this.menuBuilder.buildFAQMenu();

        await bot.editMessageText(menuData.text, {
            chat_id: chatId,
            message_id: messageId,
            reply_markup: menuData.keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã' };
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏
     */
    async handleEmergency(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const telegramId = callbackQuery.from.id;
        
        const text = `üÜò –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ü–û–ú–û–©–¨

–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π:
‚Ä¢ Telegram: @admin_username
‚Ä¢ Email: emergency@example.com

‚è∞ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: –¥–æ 30 –º–∏–Ω—É—Ç

üî¥ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!`;

        const keyboard = {
            inline_keyboard: [
                [
                    { text: 'üì± –ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É', url: 'https://t.me/admin_username' }
                ],
                [
                    { text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'help_main' }
                ]
            ]
        };

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const ADMIN_ID = parseInt(process.env.ADMIN_ID);
        await bot.sendMessage(ADMIN_ID, 
            `üÜò –≠–ö–°–¢–†–ï–ù–ù–´–ô –ó–ê–ü–†–û–°\n\n` +
            `–û—Ç: ${user?.getDisplayName() || telegramId}\n` +
            `ID: ${telegramId}\n` +
            `–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å.`
        );

        await bot.editMessageText(text, {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            reply_markup: keyboard,
            parse_mode: 'HTML'
        });

        return { notificationText: '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É' };
    }

    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    async handleAdminSettings(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')(callbackQuery, user, userType, bot);
    }

    async handleAdminNotifications(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')(callbackQuery, user, userType, bot);
    }

    async handleAdminRequests(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ó–∞—è–≤–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é')(callbackQuery, user, userType, bot);
    }

    async handleAdminBlocks(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏')(callbackQuery, user, userType, bot);
    }

    async handleAdminBackup(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ')(callbackQuery, user, userType, bot);
    }

    async handleUserSettings(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')(callbackQuery, user, userType, bot);
    }

    async handleUserHistory(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ò—Å—Ç–æ—Ä–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')(callbackQuery, user, userType, bot);
    }

    async handleUserNews(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ù–æ–≤–æ—Å—Ç–∏')(callbackQuery, user, userType, bot);
    }

    async handleUserFAQ(callbackQuery, user, userType, bot) {
        return this.handleGuestFAQ(callbackQuery, user, userType, bot);
    }

    async handleUserSupport(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')(callbackQuery, user, userType, bot);
    }

    async handleGuestCheckRequest(callbackQuery, user, userType, bot) {
        return this.createPlaceholderHandler('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–∫–∏')(callbackQuery, user, userType, bot);
    }

    async handleRefresh(callbackQuery, user, userType, bot) {
        return this.handleMainMenu(callbackQuery, user, userType, bot);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async handleAdminAllUsers(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const User = require('../database/models/user');
            const allUsers = await User.findAll({ limit: 10 }); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            
            const menuData = this.menuBuilder.buildAllUsersMenu(allUsers);

            await bot.editMessageText(menuData.text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: menuData.keyboard,
                parse_mode: 'HTML'
            });

            return { notificationText: `–ù–∞–π–¥–µ–Ω–æ ${allUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π` };
        } catch (error) {
            console.error('Error in handleAdminAllUsers:', error);
            return { notificationText: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
     */
    async handleAdminPendingRequests(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        try {
            const AuthRequest = require('../database/models/authRequest');
            const pendingRequests = await AuthRequest.findPending();
            
            const menuData = this.menuBuilder.buildPendingRequestsMenu(pendingRequests);

            await bot.editMessageText(menuData.text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: menuData.keyboard,
                parse_mode: 'HTML'
            });

            return { notificationText: `–ù–∞–π–¥–µ–Ω–æ ${pendingRequests.length} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫` };
        } catch (error) {
            console.error('Error in handleAdminPendingRequests:', error);
            return { notificationText: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async handleAdminAuthorized(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        try {
            const User = require('../database/models/user');
            const authorizedUsers = await User.findAuthorized();
            
            const menuData = this.menuBuilder.buildAuthorizedUsersMenu(authorizedUsers);

            await bot.editMessageText(menuData.text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: menuData.keyboard,
                parse_mode: 'HTML'
            });

            return { notificationText: `–ù–∞–π–¥–µ–Ω–æ ${authorizedUsers.length} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π` };
        } catch (error) {
            console.error('Error in handleAdminAuthorized:', error);
            return { notificationText: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    async handleAdminBlocked(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        try {
            // –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—è blocked –≤ –±–∞–∑–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            const blockedUsers = [];
            
            const menuData = this.menuBuilder.buildBlockedUsersMenu(blockedUsers);

            await bot.editMessageText(menuData.text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: menuData.keyboard,
                parse_mode: 'HTML'
            });

            return { notificationText: `–ù–∞–π–¥–µ–Ω–æ ${blockedUsers.length} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π` };
        } catch (error) {
            console.error('Error in handleAdminBlocked:', error);
            return { notificationText: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' };
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    async handleAdminDetailedStats(callbackQuery, user, userType, bot) {
        const chatId = callbackQuery.message.chat.id;
        const messageId = callbackQuery.message.message_id;
        
        try {
            const User = require('../database/models/user');
            const AuthRequest = require('../database/models/authRequest');
            const HelpMetrics = require('../database/models/helpMetrics');
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const [totalUsers, authorizedUsers, pendingRequests, allMetrics] = await Promise.all([
                User.findAll(),
                User.findAuthorized(),
                AuthRequest.findPending(),
                HelpMetrics.findAll()
            ]);
            
            const stats = {
                total: totalUsers.length,
                authorized: authorizedUsers.length,
                unauthorized: totalUsers.length - authorizedUsers.length,
                pendingRequests: pendingRequests.length,
                blocked: 0, // TODO: implement when blocked field is added
                helpMetrics: allMetrics.length
            };
            
            const menuData = this.menuBuilder.buildDetailedStatsMenu(stats);

            await bot.editMessageText(menuData.text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: menuData.keyboard,
                parse_mode: 'HTML'
            });

            return { notificationText: '–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã' };
        } catch (error) {
            console.error('Error in handleAdminDetailedStats:', error);
            return { notificationText: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' };
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫-–∑–∞–≥–ª—É—à–∫—É
     * @param {string} sectionName - –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
     * @returns {Function} - –û–±—Ä–∞–±–æ—Ç—á–∏–∫-–∑–∞–≥–ª—É—à–∫–∞
     */
    createPlaceholderHandler(sectionName) {
        return async (callbackQuery, user, userType, bot) => {
            const chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            
            const text = `üöß ${sectionName}

–†–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

üîú –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üí° –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'help_main' }
                    ]
                ]
            };

            await bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: keyboard
            });

            return { notificationText: `${sectionName} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ` };
        };
    }
}

module.exports = NavigationManager;