const Garage = require('../database/models/garage');
const database = require('../database/connection');

/**
 * StatusUpdaterService - –°–ª—É–∂–±–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∞—É–¥–∏—Ç–æ–º
 */
class StatusUpdaterService {
    constructor() {
        this.validStatuses = ['–•–æ—Ä–æ—à–µ–µ', '–°—Ä–µ–¥–Ω–µ–µ', '–ü–ª–æ—Ö–æ–µ'];
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
     * @param {string} status - –°—Ç–∞—Ç—É—Å –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
     * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
     */
    normalizeStatus(status) {
        if (!status || typeof status !== 'string') {
            throw new Error('–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
        }

        const normalized = status.trim().toLowerCase();
        
        // –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
        const statusMap = {
            '—Ö–æ—Ä–æ—à–µ–µ': '–•–æ—Ä–æ—à–µ–µ',
            '—Ö–æ—Ä–æ—à–∏–π': '–•–æ—Ä–æ—à–µ–µ',
            '—Ö–æ—Ä–æ—à–æ': '–•–æ—Ä–æ—à–µ–µ',
            'good': '–•–æ—Ä–æ—à–µ–µ',
            'excellent': '–•–æ—Ä–æ—à–µ–µ',
            '—Å—Ä–µ–¥–Ω–µ–µ': '–°—Ä–µ–¥–Ω–µ–µ',
            '—Å—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–µ–µ',
            '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ': '–°—Ä–µ–¥–Ω–µ–µ',
            'average': '–°—Ä–µ–¥–Ω–µ–µ',
            'medium': '–°—Ä–µ–¥–Ω–µ–µ',
            '–ø–ª–æ—Ö–æ–µ': '–ü–ª–æ—Ö–æ–µ',
            '–ø–ª–æ—Ö–æ–π': '–ü–ª–æ—Ö–æ–µ',
            '–ø–ª–æ—Ö–æ': '–ü–ª–æ—Ö–æ–µ',
            'bad': '–ü–ª–æ—Ö–æ–µ',
            'poor': '–ü–ª–æ—Ö–æ–µ'
        };

        const result = statusMap[normalized];
        if (!result) {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: "${status}". –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${this.validStatuses.join(', ')}`);
        }

        return result;
    }

    /**
     * –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Object|null>} –ù–∞–π–¥–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–ª–∏ null
     */
    async findVehicleByName(carName) {
        if (!carName || typeof carName !== 'string') {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π');
        }

        const normalizedName = carName.trim();
        
        // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        const exactMatch = await this.findExactMatch(normalizedName);
        if (exactMatch) {
            return exactMatch;
        }

        // –ü–æ–∏—Å–∫ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
        const caseInsensitiveMatch = await this.findCaseInsensitiveMatch(normalizedName);
        if (caseInsensitiveMatch) {
            return caseInsensitiveMatch;
        }

        // Fuzzy –ø–æ–∏—Å–∫ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        const fuzzyMatch = await this.findFuzzyMatch(normalizedName);
        return fuzzyMatch;
    }

    /**
     * –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Object|null>}
     */
    async findExactMatch(carName) {
        const sql = 'SELECT * FROM garage WHERE car_name = ?';
        try {
            const row = await database.get(sql, [carName]);
            return row ? new Garage(row) : null;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Object|null>}
     */
    async findCaseInsensitiveMatch(carName) {
        const sql = 'SELECT * FROM garage WHERE LOWER(car_name) = LOWER(?)';
        try {
            const row = await database.get(sql, [carName]);
            return row ? new Garage(row) : null;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: ${error.message}`);
        }
    }

    /**
     * Fuzzy –ø–æ–∏—Å–∫ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Object|null>}
     */
    async findFuzzyMatch(carName) {
        const sql = 'SELECT * FROM garage WHERE car_name LIKE ?';
        try {
            // –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            const keywords = carName.split(/\s+/).filter(word => word.length > 2);
            
            for (const keyword of keywords) {
                const row = await database.get(sql, [`%${keyword}%`]);
                if (row) {
                    return new Garage(row);
                }
            }
            
            return null;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ fuzzy –ø–æ–∏—Å–∫–∞: ${error.message}`);
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
     * @param {string} oldStatus - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
     * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @returns {boolean} –†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥
     */
    validateStatusTransition(oldStatus, newStatus) {
        // –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
        return this.validStatuses.includes(oldStatus) && this.validStatuses.includes(newStatus);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} oldStatus - –°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å
     * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @param {string} updateReason - –ü—Ä–∏—á–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async logStatusChange(carId, carName, oldStatus, newStatus, updateReason = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ StatusUpdaterService') {
        const logEntry = {
            timestamp: new Date().toISOString(),
            carId,
            carName,
            oldStatus,
            newStatus,
            updateReason,
            source: 'StatusUpdaterService'
        };

        console.log(`üìù [AUDIT] ${logEntry.timestamp}: ${carName} (ID: ${carId}) –∏–∑–º–µ–Ω–µ–Ω —Å "${oldStatus}" –Ω–∞ "${newStatus}"`);
        
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É audit_log
        return logEntry;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
     * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async updateSingleVehicle(carName, newStatus) {
        try {
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç–∞—Ç—É—Å
            const normalizedStatus = this.normalizeStatus(newStatus);
            
            // –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
            const vehicle = await this.findVehicleByName(carName);
            if (!vehicle) {
                return {
                    success: false,
                    carName,
                    error: `–ê–≤—Ç–æ–º–æ–±–∏–ª—å "${carName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`,
                    suggestions: await this.getSimilarVehicleNames(carName)
                };
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (vehicle.status === normalizedStatus) {
                return {
                    success: true,
                    carName: vehicle.car_name,
                    carId: vehicle.car_id,
                    oldStatus: vehicle.status,
                    newStatus: normalizedStatus,
                    changed: false,
                    message: '–°—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
                };
            }

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
            if (!this.validateStatusTransition(vehicle.status, normalizedStatus)) {
                return {
                    success: false,
                    carName: vehicle.car_name,
                    error: `–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å "${vehicle.status}" –Ω–∞ "${normalizedStatus}"`
                };
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            const oldStatus = vehicle.status;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await Garage.updateStatus(vehicle.car_id, normalizedStatus);

            // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            await this.logStatusChange(vehicle.car_id, vehicle.car_name, oldStatus, normalizedStatus);

            return {
                success: true,
                carName: vehicle.car_name,
                carId: vehicle.car_id,
                oldStatus,
                newStatus: normalizedStatus,
                changed: true,
                message: '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
            };

        } catch (error) {
            return {
                success: false,
                carName,
                error: error.message
            };
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
     * @param {string} carName - –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<Array<string>>} –ú–∞—Å—Å–∏–≤ –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
     */
    async getSimilarVehicleNames(carName) {
        try {
            const allCars = await Garage.getAllCars();
            const keywords = carName.toLowerCase().split(/\s+/);
            
            const similar = allCars.filter(car => {
                const carNameLower = car.car_name.toLowerCase();
                return keywords.some(keyword => carNameLower.includes(keyword));
            }).map(car => car.car_name);

            return similar.slice(0, 3); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π:', error);
            return [];
        }
    }

    /**
     * –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     * @param {Array<Object>} vehicleStatusList - –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {carName, status}
     * @returns {Promise<Object>} –û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     */
    async updateVehicleStatuses(vehicleStatusList) {
        if (!Array.isArray(vehicleStatusList)) {
            throw new Error('–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }

        const report = {
            startTime: new Date().toISOString(),
            total: vehicleStatusList.length,
            successful: [],
            failed: [],
            unchanged: [],
            summary: {
                updated: 0,
                failed: 0,
                unchanged: 0,
                errors: []
            }
        };

        console.log(`üöó –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è ${vehicleStatusList.length} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...`);

        for (const vehicleData of vehicleStatusList) {
            const { carName, status } = vehicleData;
            
            try {
                const result = await this.updateSingleVehicle(carName, status);
                
                if (result.success) {
                    if (result.changed) {
                        report.successful.push(result);
                        report.summary.updated++;
                        console.log(`‚úÖ ${result.carName}: ${result.oldStatus} ‚Üí ${result.newStatus}`);
                    } else {
                        report.unchanged.push(result);
                        report.summary.unchanged++;
                        console.log(`‚ö™ ${result.carName}: ${result.message}`);
                    }
                } else {
                    report.failed.push(result);
                    report.summary.failed++;
                    report.summary.errors.push(result.error);
                    console.log(`‚ùå ${carName}: ${result.error}`);
                    
                    if (result.suggestions && result.suggestions.length > 0) {
                        console.log(`   üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: ${result.suggestions.join(', ')}`);
                    }
                }
            } catch (error) {
                const errorResult = {
                    success: false,
                    carName,
                    error: error.message
                };
                
                report.failed.push(errorResult);
                report.summary.failed++;
                report.summary.errors.push(error.message);
                console.log(`‚ùå ${carName}: ${error.message}`);
            }
        }

        report.endTime = new Date().toISOString();
        report.duration = new Date(report.endTime) - new Date(report.startTime);

        return report;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     * @param {Object} report - –û—Ç—á–µ—Ç –æ—Ç updateVehicleStatuses
     * @returns {string} –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
     */
    generateUpdateReport(report) {
        const lines = [
            'üöó –û–¢–ß–ï–¢ –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–ò –°–¢–ê–¢–£–°–û–í –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô',
            '=' .repeat(50),
            `üìÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${new Date(report.startTime).toLocaleString('ru-RU')}`,
            `‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${Math.round(report.duration / 1000)}—Å`,
            `üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${report.total}`,
            '',
            'üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:',
            `‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${report.summary.updated}`,
            `‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${report.summary.unchanged}`,
            `‚ùå –û—à–∏–±–∫–∏: ${report.summary.failed}`,
            ''
        ];

        if (report.successful.length > 0) {
            lines.push('‚úÖ –£–°–ü–ï–®–ù–û –û–ë–ù–û–í–õ–ï–ù–´:');
            report.successful.forEach(item => {
                lines.push(`   ‚Ä¢ ${item.carName}: ${item.oldStatus} ‚Üí ${item.newStatus}`);
            });
            lines.push('');
        }

        if (report.unchanged.length > 0) {
            lines.push('‚ö™ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô:');
            report.unchanged.forEach(item => {
                lines.push(`   ‚Ä¢ ${item.carName}: ${item.newStatus} (—É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)`);
            });
            lines.push('');
        }

        if (report.failed.length > 0) {
            lines.push('‚ùå –û–®–ò–ë–ö–ò:');
            report.failed.forEach(item => {
                lines.push(`   ‚Ä¢ ${item.carName}: ${item.error}`);
            });
            lines.push('');
        }

        return lines.join('\n');
    }
}

module.exports = StatusUpdaterService;