/**
 * ProfileFormatter Component
 * Formats beautiful profile messages with status-specific layouts and interactive keyboards
 */

class ProfileFormatter {
    constructor() {
        // Emoji constants for consistent styling
        this.emojis = {
            crown: 'üëë',
            check: '‚úÖ',
            lock: 'üîí',
            person: 'üë§',
            chart: 'üìä',
            calendar: 'üìÖ',
            clock: 'üïê',
            star: '‚≠ê',
            shield: 'üõ°Ô∏è',
            key: 'üîë',
            arrow: '‚û§',
            dot: '‚Ä¢',
            branch: '‚îú‚îÄ‚îÄ',
            lastBranch: '‚îî‚îÄ‚îÄ'
        };
    }

    /**
     * Format complete profile message
     * @param {Object} profileData - Complete profile data from UserDataRetriever
     * @returns {Object} Formatted message and keyboard
     */
    formatProfileMessage(profileData) {
        try {
            const message = this.buildProfileMessage(profileData);
            const keyboard = this.buildInteractiveKeyboard(profileData);

            return {
                message,
                keyboard,
                parseMode: 'HTML'
            };
        } catch (error) {
            throw new Error(`Failed to format profile message: ${error.message}`);
        }
    }

    /**
     * Build the main profile message
     * @param {Object} profileData - Profile data
     * @returns {string} Formatted message
     */
    buildProfileMessage(profileData) {
        const header = this.formatProfileHeader(profileData);
        const personalInfo = this.formatPersonalInformation(profileData);
        const statusInfo = this.formatStatusInformation(profileData);
        const specificInfo = this.formatStatusSpecificInfo(profileData);

        return [
            header,
            '',
            personalInfo,
            '',
            statusInfo,
            '',
            specificInfo
        ].join('\n');
    }

    /**
     * Format profile header with status badge and name
     * @param {Object} profileData - Profile data
     * @returns {string} Formatted header
     */
    formatProfileHeader(profileData) {
        const { statusInfo } = profileData;
        const displayName = this.getDisplayName(profileData);
        
        return [
            `${statusInfo.emoji} <b>${displayName}</b>`,
            `${statusInfo.badge}`
        ].join('\n');
    }

    /**
     * Format personal information section
     * @param {Object} profileData - Profile data
     * @returns {string} Formatted personal information
     */
    formatPersonalInformation(profileData) {
        const username = this.getUsername(profileData);
        const fullName = this.getFullName(profileData);
        const language = this.getLanguageDisplay(profileData.language_code);
        const memberSince = profileData.memberSince;

        return [
            `${this.emojis.person} <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>`,
            `${this.emojis.branch} –ò–º—è: ${fullName}`,
            `${this.emojis.branch} Username: ${username}`,
            `${this.emojis.branch} –Ø–∑—ã–∫: ${language}`,
            `${this.emojis.lastBranch} –£—á–∞—Å—Ç–Ω–∏–∫ —Å: ${memberSince}`
        ].join('\n');
    }

    /**
     * Format status information section
     * @param {Object} profileData - Profile data
     * @returns {string} Formatted status information
     */
    formatStatusInformation(profileData) {
        const { statusInfo, profileCompleteness, lastActivity } = profileData;

        return [
            `${this.emojis.chart} <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è</b>`,
            `${this.emojis.branch} –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: ${statusInfo.level}`,
            `${this.emojis.branch} –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è: ${profileCompleteness}%`,
            `${this.emojis.lastBranch} –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity}`
        ].join('\n');
    }

    /**
     * Format status-specific information
     * @param {Object} profileData - Profile data
     * @returns {string} Formatted status-specific information
     */
    formatStatusSpecificInfo(profileData) {
        const { statusInfo, isAdmin, authRequest } = profileData;

        switch (statusInfo.type) {
            case 'admin':
                return this.formatAdminInfo();
            case 'authorized':
                return this.formatAuthorizedInfo();
            case 'unauthorized':
                return this.formatUnauthorizedInfo(authRequest);
            default:
                return '';
        }
    }

    /**
     * Format admin-specific information
     * @returns {string} Formatted admin info
     */
    formatAdminInfo() {
        return [
            `${this.emojis.crown} <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏</b>`,
            `${this.emojis.branch} –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏`,
            `${this.emojis.branch} –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é`,
            `${this.emojis.branch} –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ`,
            `${this.emojis.lastBranch} –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`
        ].join('\n');
    }

    /**
     * Format authorized user information
     * @returns {string} Formatted authorized user info
     */
    formatAuthorizedInfo() {
        return [
            `${this.emojis.check} <b>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</b>`,
            `${this.emojis.branch} –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É`,
            `${this.emojis.branch} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥`,
            `${this.emojis.lastBranch} –£—á–∞—Å—Ç–∏–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö`
        ].join('\n');
    }

    /**
     * Format unauthorized user information
     * @param {Object} authRequest - Authorization request data
     * @returns {string} Formatted unauthorized user info
     */
    formatUnauthorizedInfo(authRequest) {
        const requestStatus = this.formatAuthRequestStatus(authRequest);
        
        return [
            `${this.emojis.lock} <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>`,
            `${this.emojis.branch} –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø`,
            `${this.emojis.branch} –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏: ${requestStatus}`,
            `${this.emojis.lastBranch} –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è`
        ].join('\n');
    }

    /**
     * Format authorization request status
     * @param {Object} authRequest - Authorization request data
     * @returns {string} Formatted request status
     */
    formatAuthRequestStatus(authRequest) {
        if (!authRequest.hasRequest) {
            return '–ù–µ –ø–æ–¥–∞–Ω–∞';
        }

        const statusMap = {
            'pending': '–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
            'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            'none': '–ù–µ –ø–æ–¥–∞–Ω–∞'
        };

        return statusMap[authRequest.status] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }

    /**
     * Build interactive keyboard based on user status
     * @param {Object} profileData - Profile data
     * @returns {Object} Telegram inline keyboard
     */
    buildInteractiveKeyboard(profileData) {
        const { statusInfo, isAdmin } = profileData;
        const keyboard = [];

        switch (statusInfo.type) {
            case 'admin':
                keyboard.push(
                    [
                        { text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data: 'admin_users' },
                        { text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'admin_analytics' }
                    ],
                    [
                        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin_settings' },
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'refresh_profile' }
                    ]
                );
                break;

            case 'authorized':
                keyboard.push(
                    [
                        { text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' },
                        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' }
                    ],
                    [
                        { text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'notifications' },
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'refresh_profile' }
                    ]
                );
                break;

            case 'unauthorized':
            default:
                keyboard.push(
                    [
                        { text: 'üîê –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'submit_auth_request' },
                        { text: 'üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏', callback_data: 'check_auth_status' }
                    ],
                    [
                        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'help' },
                        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'refresh_profile' }
                    ]
                );
                break;
        }

        return {
            inline_keyboard: keyboard
        };
    }

    /**
     * Get display name with fallbacks
     * @param {Object} profileData - Profile data
     * @returns {string} Display name
     */
    getDisplayName(profileData) {
        if (profileData.first_name || profileData.last_name) {
            const parts = [];
            if (profileData.first_name) parts.push(profileData.first_name);
            if (profileData.last_name) parts.push(profileData.last_name);
            return parts.join(' ');
        }
        
        if (profileData.username) {
            return `@${profileData.username}`;
        }
        
        return `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${profileData.telegram_id}`;
    }

    /**
     * Get username with @ prefix or fallback
     * @param {Object} profileData - Profile data
     * @returns {string} Username or fallback
     */
    getUsername(profileData) {
        return profileData.username ? `@${profileData.username}` : '<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>';
    }

    /**
     * Get full name or fallback
     * @param {Object} profileData - Profile data
     * @returns {string} Full name or fallback
     */
    getFullName(profileData) {
        const parts = [];
        if (profileData.first_name) parts.push(profileData.first_name);
        if (profileData.last_name) parts.push(profileData.last_name);
        
        return parts.length > 0 ? parts.join(' ') : '<i>–ù–µ —É–∫–∞–∑–∞–Ω–æ</i>';
    }

    /**
     * Get language display name
     * @param {string} languageCode - Language code
     * @returns {string} Language display name
     */
    getLanguageDisplay(languageCode) {
        const languages = {
            'ru': 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
            'en': 'üá∫üá∏ English',
            'uk': 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞',
            'be': 'üáßüáæ –ë–µ–ª–∞—Ä—É—Å–∫–∞—è',
            'kk': 'üá∞üáø “ö–∞–∑–∞“õ—à–∞'
        };
        
        return languages[languageCode] || `${languageCode || '<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>'}`;
    }

    /**
     * Format profile completeness with visual indicator
     * @param {number} completeness - Completeness percentage
     * @returns {string} Formatted completeness with progress bar
     */
    formatProfileCompleteness(completeness) {
        const filled = Math.floor(completeness / 10);
        const empty = 10 - filled;
        const progressBar = '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);
        
        return `${completeness}% [${progressBar}]`;
    }

    /**
     * Create a simple text-only profile for fallback
     * @param {Object} profileData - Profile data
     * @returns {string} Simple profile text
     */
    formatSimpleProfile(profileData) {
        const { statusInfo } = profileData;
        const displayName = this.getDisplayName(profileData);
        
        return [
            `${statusInfo.emoji} ${displayName}`,
            `–°—Ç–∞—Ç—É—Å: ${statusInfo.badge}`,
            `–£—Ä–æ–≤–µ–Ω—å: ${statusInfo.level}`,
            `–£—á–∞—Å—Ç–Ω–∏–∫ —Å: ${profileData.memberSince}`,
            `–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${profileData.lastActivity}`
        ].join('\n');
    }

    /**
     * Format error message for profile display
     * @param {string} errorMessage - Error message
     * @returns {string} Formatted error message
     */
    formatErrorMessage(errorMessage) {
        return [
            '‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>',
            '',
            `–ü—Ä–∏—á–∏–Ω–∞: ${errorMessage}`,
            '',
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
        ].join('\n');
    }

    /**
     * Get profile statistics for display
     * @param {Object} profileData - Profile data
     * @returns {Object} Profile statistics
     */
    getProfileStats(profileData) {
        return {
            completeness: profileData.profileCompleteness,
            fieldsCompleted: Math.floor(profileData.profileCompleteness / 20),
            totalFields: 5,
            hasAvatar: !!profileData.first_name,
            hasUsername: !!profileData.username,
            memberDays: this.calculateMemberDays(profileData.created_at)
        };
    }

    /**
     * Calculate member days
     * @param {string} createdAt - Creation timestamp
     * @returns {number} Days since creation
     */
    calculateMemberDays(createdAt) {
        if (!createdAt) return 0;
        
        try {
            const created = new Date(createdAt);
            const now = new Date();
            const diffTime = Math.abs(now - created);
            return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        } catch (error) {
            return 0;
        }
    }
}

module.exports = ProfileFormatter;