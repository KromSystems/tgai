const Garage = require('../database/models/garage');
const GarageRequest = require('../database/models/garageRequest');
const User = require('../database/models/user');
const path = require('path');
const fs = require('fs');

/**
 * GarageManager - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞—Ä–∞–∂–æ–º
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /takecar –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
class GarageManager {
    constructor(bot, adminId) {
        this.bot = bot;
        this.adminId = adminId;
        this.userSessions = new Map(); // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.SESSION_TIMEOUT = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
        
        // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        this.STATES = {
            AWAITING_PHOTO: 'garage_awaiting_photo',
            AWAITING_REJECTION_REASON: 'garage_awaiting_rejection_reason'
        };

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π
        setInterval(() => this.cleanupExpiredSessions(), 5 * 60 * 1000);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /takecar
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
     */
    async handleTakeCarCommand(msg) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await User.findByTelegramId(telegramId);
            if (!user || !user.isAuthorized()) {
                await this.bot.sendMessage(chatId, 
                    '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!\n\n' +
                    '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. ' +
                    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.'
                );
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            await this.showGarageMenu(chatId, 0);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /takecar:', error);
            await this.bot.sendMessage(chatId, 
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–∞—Ä–∞–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–∞—Ä–∞–∂–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async showGarageMenu(chatId, page = 0) {
        try {
            const pageSize = 5;
            const carsData = await Garage.getCarsPaginated(page, pageSize);
            const { cars, pagination } = carsData;

            if (cars.length === 0) {
                await this.bot.sendMessage(chatId, 'üöó –ì–∞—Ä–∞–∂ –ø—É—Å—Ç!');
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            let messageText = `üöó –ì–ê–†–ê–ñ –°–ï–ú–¨–ò | –ê–í–¢–û–ú–û–ë–ò–õ–ò (${pagination.currentPage + 1}/${pagination.totalPages})\n\n`;
            
            cars.forEach(car => {
                messageText += `${car.getDisplayName()}\n`;
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            const keyboard = this.buildGarageKeyboard(cars, pagination);

            const options = {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            };

            await this.bot.sendMessage(chatId, messageText, options);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –≥–∞—Ä–∞–∂–∞:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π');
        }
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–∞—Ä–∞–∂–∞
     * @param {Array} cars - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
     * @param {Object} pagination - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     * @returns {Array} –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
     */
    buildGarageKeyboard(cars, pagination) {
        const keyboard = [];

        // –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–ø–æ 2 –≤ —Ä—è–¥—É)
        for (let i = 0; i < cars.length; i += 2) {
            const row = [];
            
            // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
            const car1 = cars[i];
            row.push({
                text: `üöó ${car1.car_name}`,
                callback_data: `select_car_${car1.car_id}`
            });

            // –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (i + 1 < cars.length) {
                const car2 = cars[i + 1];
                row.push({
                    text: `üöó ${car2.car_name}`,
                    callback_data: `select_car_${car2.car_id}`
                });
            }

            keyboard.push(row);
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const navRow = [];
        if (pagination.hasPrev) {
            navRow.push({
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                callback_data: `garage_page_${pagination.currentPage - 1}`
            });
        }
        if (pagination.hasNext) {
            navRow.push({
                text: '‚û°Ô∏è –î–∞–ª–µ–µ',
                callback_data: `garage_page_${pagination.currentPage + 1}`
            });
        }

        if (navRow.length > 0) {
            keyboard.push(navRow);
        }

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        keyboard.push([{
            text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            callback_data: 'back_to_main'
        }]);

        return keyboard;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handleCarSelection(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const telegramId = callbackQuery.from.id;
        const carId = parseInt(callbackQuery.data.split('_')[2]);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ (–∞–Ω—Ç–∏-—Å–ø–∞–º)
            const recentRequestsCount = await GarageRequest.countRecentByUser(telegramId.toString(), 1);
            if (recentRequestsCount >= 3) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ (3 –≤ —á–∞—Å)',
                    show_alert: true
                });
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            const car = await Garage.findById(carId);
            if (!car) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: '–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                    show_alert: true
                });
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
            const user = await User.findByTelegramId(telegramId);
            const existingRequest = await GarageRequest.findByUserAndCar(user.id, carId, '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ');
            
            if (existingRequest) {
                await this.bot.answerCallbackQuery(callbackQuery.id, {
                    text: `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è ${car.car_name}`,
                    show_alert: true
                });
                return;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            this.setUserSession(telegramId, {
                state: this.STATES.AWAITING_PHOTO,
                carId: carId,
                carName: car.car_name
            });

            await this.bot.answerCallbackQuery(callbackQuery.id);
            await this.bot.sendMessage(chatId, 
                `üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã –º–∞—Å–ª–∞ –¥–ª—è *${car.car_name}*\n\n` +
                `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: ${car.getDisplayName()}\n` +
                `–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 3 –º–ª–Ω –∏–≥—Ä–æ–≤–æ–π –≤–∞–ª—é—Ç—ã\n\n` +
                `‚è±Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å 30 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ.`,
                { parse_mode: 'Markdown' }
            );

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
                show_alert: true
            });
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
     * @param {Object} callbackQuery - Callback query –æ—Ç Telegram
     */
    async handlePageNavigation(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const page = parseInt(callbackQuery.data.split('_')[2]);

        try {
            await this.bot.answerCallbackQuery(callbackQuery.id);
            
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.editGarageMenu(chatId, callbackQuery.message.message_id, page);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:', error);
            await this.bot.answerCallbackQuery(callbackQuery.id, {
                text: '–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏',
                show_alert: true
            });
        }
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é –≥–∞—Ä–∞–∂–∞
     * @param {number} chatId - ID —á–∞—Ç–∞
     * @param {number} messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param {number} page - –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async editGarageMenu(chatId, messageId, page = 0) {
        try {
            const pageSize = 5;
            const carsData = await Garage.getCarsPaginated(page, pageSize);
            const { cars, pagination } = carsData;

            // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
            let messageText = `üöó –ì–ê–†–ê–ñ –°–ï–ú–¨–ò | –ê–í–¢–û–ú–û–ë–ò–õ–ò (${pagination.currentPage + 1}/${pagination.totalPages})\n\n`;
            
            cars.forEach(car => {
                messageText += `${car.getDisplayName()}\n`;
            });

            // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            const keyboard = this.buildGarageKeyboard(cars, pagination);

            await this.bot.editMessageText(messageText, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é –≥–∞—Ä–∞–∂–∞:', error);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     * @param {Object} msg - –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
     */
    async handlePhotoUpload(msg) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const session = this.getUserSession(telegramId);
            if (!session || session.state !== this.STATES.AWAITING_PHOTO) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è
            }

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await User.findByTelegramId(telegramId);
            if (!user) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                this.clearUserSession(telegramId);
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
            const photoPath = await this.savePhotoFile(msg.photo[msg.photo.length - 1].file_id, telegramId, session.carId);

            // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            const requestData = {
                car_id: session.carId,
                user_id: user.id,
                telegram_id: telegramId.toString(),
                photo_path: photoPath,
                payment_status: '–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ'
            };

            const newRequest = await GarageRequest.create(requestData);

            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            this.clearUserSession(telegramId);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.bot.sendMessage(chatId, 
                `‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!\n\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${session.carName}\n` +
                `üì∑ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ\n` +
                `üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: 3 –º–ª–Ω\n\n` +
                `‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...`
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await this.notifyAdmins(newRequest);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            this.clearUserSession(telegramId);
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
     * @param {GarageRequest} request - –ó–∞—è–≤–∫–∞
     */
    async notifyAdmins(request) {
        try {
            const [car, user] = await Promise.all([
                request.getCar(),
                request.getUser()
            ]);

            const userName = user.first_name + (user.last_name ? ` ${user.last_name}` : '');
            const username = user.username ? `@${user.username}` : '';

            const messageText = 
                `üö® –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #${request.id}\n\n` +
                `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userName} ${username}\n` +
                `üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_name}\n` +
                `üì∑ –§–æ—Ç–æ: –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –Ω–∏–∂–µ\n` +
                `‚è∞ –ü–æ–¥–∞–Ω–æ: ${request.getFormattedSubmissionDate()}`;

            const keyboard = [
                [
                    {
                        text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
                        callback_data: `garage_approve_${request.id}`
                    },
                    {
                        text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                        callback_data: `garage_reject_${request.id}`
                    }
                ]
            ];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            if (request.photoExists()) {
                await this.bot.sendPhoto(this.adminId, request.photo_path, {
                    caption: messageText,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(this.adminId, messageText, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
     * @param {string} fileId - ID —Ñ–∞–π–ª–∞ –≤ Telegram
     * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @returns {Promise<string>} –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
     */
    async savePhotoFile(fileId, telegramId, carId) {
        try {
            const file = await this.bot.getFile(fileId);
            const timestamp = Date.now();
            const fileName = `${timestamp}_${telegramId}_car${carId}.jpg`;
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const photosDir = path.join(__dirname, '..', '..', 'photos', 'garage_requests');
            if (!fs.existsSync(photosDir)) {
                fs.mkdirSync(photosDir, { recursive: true });
            }
            
            const photoPath = path.join(photosDir, fileName);
            
            await this.bot.downloadFile(fileId, photosDir);
            
            // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            const downloadedPath = path.join(photosDir, file.file_path.split('/').pop());
            if (downloadedPath !== photoPath) {
                fs.renameSync(downloadedPath, photoPath);
            }
            
            return photoPath;
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: ${error.message}`);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {Object} sessionData - –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    setUserSession(telegramId, sessionData) {
        this.userSessions.set(telegramId, {
            ...sessionData,
            startTime: Date.now()
        });
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @returns {Object|null}
     */
    getUserSession(telegramId) {
        return this.userSessions.get(telegramId) || null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param {number} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    clearUserSession(telegramId) {
        this.userSessions.delete(telegramId);
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
     */
    cleanupExpiredSessions() {
        const now = Date.now();
        for (const [telegramId, session] of this.userSessions.entries()) {
            if (now - session.startTime > this.SESSION_TIMEOUT) {
                this.userSessions.delete(telegramId);
                console.log(`–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–µ–∫—à–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);
            }
        }
    }
}

module.exports = GarageManager;