const database = require('../database/connection');
const fs = require('fs').promises;
const path = require('path');

/**
 * AuditLogger - –°–ª—É–∂–±–∞ –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
class AuditLogger {
    constructor() {
        this.logDir = path.join(process.cwd(), 'logs');
        this.logFile = path.join(this.logDir, 'status_updates.log');
        this.jsonLogFile = path.join(this.logDir, 'status_updates.json');
        this.setupPromise = this.ensureLogDirectory();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
     */
    async ensureLogDirectory() {
        try {
            await fs.access(this.logDir);
        } catch (error) {
            if (error.code === 'ENOENT') {
                await fs.mkdir(this.logDir, { recursive: true });
                console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤: ${this.logDir}`);
            } else {
                throw error;
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
     * @param {Object} auditData - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
     * @returns {Object} –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    createAuditEntry(auditData) {
        const timestamp = new Date().toISOString();
        const auditId = this.generateAuditId();

        return {
            auditId,
            timestamp,
            event: 'status_update',
            carId: auditData.carId || null,
            carName: auditData.carName || null,
            oldStatus: auditData.oldStatus || null,
            newStatus: auditData.newStatus || null,
            updateReason: auditData.updateReason || 'Manual update',
            source: auditData.source || 'StatusUpdaterService',
            operator: auditData.operator || 'system',
            batchId: auditData.batchId || null,
            success: auditData.success !== false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é true
            error: auditData.error || null,
            metadata: {
                userAgent: auditData.userAgent || null,
                ipAddress: auditData.ipAddress || null,
                sessionId: auditData.sessionId || null,
                requestId: auditData.requestId || null,
                validationWarnings: auditData.validationWarnings || [],
                previousUpdate: auditData.previousUpdate || null,
                processingTime: auditData.processingTime || null
            }
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏—Ç–∞
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
     */
    generateAuditId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 9);
        return `audit_${timestamp}_${random}`;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
     * @param {Object} updateData - –î–∞–Ω–Ω—ã–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     * @returns {Promise<Object>} –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    async logStatusUpdate(updateData) {
        await this.setupPromise;

        const auditEntry = this.createAuditEntry({
            carId: updateData.carId,
            carName: updateData.carName,
            oldStatus: updateData.oldStatus,
            newStatus: updateData.newStatus,
            updateReason: updateData.updateReason,
            source: updateData.source,
            operator: updateData.operator,
            batchId: updateData.batchId,
            success: true,
            validationWarnings: updateData.validationWarnings,
            processingTime: updateData.processingTime
        });

        await this.writeToLogs(auditEntry);
        console.log(`üìù [AUDIT] ${auditEntry.timestamp}: ${updateData.carName} (${updateData.carId}) ${updateData.oldStatus} ‚Üí ${updateData.newStatus}`);

        return auditEntry;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} errorData - –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
     * @returns {Promise<Object>} –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    async logStatusUpdateError(errorData) {
        await this.setupPromise;

        const auditEntry = this.createAuditEntry({
            carId: errorData.carId,
            carName: errorData.carName,
            oldStatus: errorData.oldStatus,
            newStatus: errorData.attemptedStatus,
            updateReason: errorData.updateReason,
            source: errorData.source,
            operator: errorData.operator,
            batchId: errorData.batchId,
            success: false,
            error: errorData.error,
            processingTime: errorData.processingTime
        });

        await this.writeToLogs(auditEntry);
        console.log(`‚ùå [AUDIT] ${auditEntry.timestamp}: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${errorData.carName}: ${errorData.error}`);

        return auditEntry;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} batchData - –î–∞–Ω–Ω—ã–µ –æ –ø–∞–∫–µ—Ç–µ
     * @returns {Promise<Object>} –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    async logBatchStart(batchData) {
        await this.setupPromise;

        const auditEntry = this.createAuditEntry({
            updateReason: 'Batch update started',
            source: batchData.source,
            operator: batchData.operator,
            batchId: batchData.batchId,
            metadata: {
                totalVehicles: batchData.totalVehicles,
                batchSize: batchData.batchSize,
                expectedDuration: batchData.expectedDuration
            }
        });

        auditEntry.event = 'batch_start';
        await this.writeToLogs(auditEntry);
        console.log(`üöÄ [AUDIT] ${auditEntry.timestamp}: –ù–∞—á–∞—Ç–æ –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ${batchData.totalVehicles} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (Batch ID: ${batchData.batchId})`);

        return auditEntry;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {Object} batchData - –î–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–∞–∫–µ—Ç–∞
     * @returns {Promise<Object>} –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    async logBatchComplete(batchData) {
        await this.setupPromise;

        const auditEntry = this.createAuditEntry({
            updateReason: 'Batch update completed',
            source: batchData.source,
            operator: batchData.operator,
            batchId: batchData.batchId,
            success: batchData.success,
            error: batchData.error,
            metadata: {
                totalVehicles: batchData.totalVehicles,
                successfulUpdates: batchData.successfulUpdates,
                failedUpdates: batchData.failedUpdates,
                unchangedVehicles: batchData.unchangedVehicles,
                processingTime: batchData.processingTime,
                errors: batchData.errors || []
            }
        });

        auditEntry.event = 'batch_complete';
        await this.writeToLogs(auditEntry);
        
        const status = batchData.success ? '‚úÖ' : '‚ùå';
        console.log(`${status} [AUDIT] ${auditEntry.timestamp}: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (Batch ID: ${batchData.batchId}). –£—Å–ø–µ—à–Ω–æ: ${batchData.successfulUpdates}, –û—à–∏–±–∫–∏: ${batchData.failedUpdates}`);

        return auditEntry;
    }

    /**
     * –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤
     * @param {Object} auditEntry - –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     */
    async writeToLogs(auditEntry) {
        try {
            // –ó–∞–ø–∏—Å—å –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–æ–≥
            const logLine = this.formatLogLine(auditEntry);
            await fs.appendFile(this.logFile, logLine + '\n', 'utf8');

            // –ó–∞–ø–∏—Å—å –≤ JSON –ª–æ–≥
            await fs.appendFile(this.jsonLogFile, JSON.stringify(auditEntry) + '\n', 'utf8');

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª—ã:', error);
            // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
     * @param {Object} auditEntry - –ó–∞–ø–∏—Å—å –∞—É–¥–∏—Ç–∞
     * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    formatLogLine(auditEntry) {
        const timestamp = auditEntry.timestamp;
        const event = auditEntry.event.toUpperCase();
        const status = auditEntry.success ? 'SUCCESS' : 'ERROR';
        
        let details = [];
        
        if (auditEntry.carName) {
            details.push(`Vehicle: ${auditEntry.carName} (ID: ${auditEntry.carId})`);
        }
        
        if (auditEntry.oldStatus && auditEntry.newStatus) {
            details.push(`Status: ${auditEntry.oldStatus} ‚Üí ${auditEntry.newStatus}`);
        }
        
        if (auditEntry.batchId) {
            details.push(`Batch: ${auditEntry.batchId}`);
        }
        
        if (auditEntry.error) {
            details.push(`Error: ${auditEntry.error}`);
        }

        const detailsStr = details.join(' | ');
        return `[${timestamp}] ${event} ${status} ${auditEntry.auditId} - ${detailsStr}`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} carId - ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è
     * @param {number} limit - –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50)
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞
     */
    async getVehicleHistory(carId, limit = 50) {
        try {
            await this.setupPromise;
            const entries = await this.readJsonLogs();
            
            return entries
                .filter(entry => entry.carId === carId)
                .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
                .slice(0, limit);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', error);
            return [];
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param {string} batchId - ID –ø–∞–∫–µ—Ç–∞
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞
     */
    async getBatchHistory(batchId) {
        try {
            await this.setupPromise;
            const entries = await this.readJsonLogs();
            
            return entries
                .filter(entry => entry.batchId === batchId)
                .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–∫–µ—Ç–∞:', error);
            return [];
        }
    }

    /**
     * –ß—Ç–µ–Ω–∏–µ JSON –ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
     * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –∞—É–¥–∏—Ç–∞
     */
    async readJsonLogs() {
        try {
            const content = await fs.readFile(this.jsonLogFile, 'utf8');
            const lines = content.trim().split('\n').filter(line => line.trim());
            return lines.map(line => JSON.parse(line));
        } catch (error) {
            if (error.code === 'ENOENT') {
                return []; // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            }
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥
     * @param {Date} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
     * @param {Date} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
     * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
     */
    async getUpdateStatistics(startDate, endDate) {
        try {
            const entries = await this.readJsonLogs();
            const filteredEntries = entries.filter(entry => {
                const entryDate = new Date(entry.timestamp);
                return entryDate >= startDate && entryDate <= endDate && entry.event === 'status_update';
            });

            const stats = {
                totalUpdates: filteredEntries.length,
                successfulUpdates: filteredEntries.filter(e => e.success).length,
                failedUpdates: filteredEntries.filter(e => !e.success).length,
                statusTransitions: {},
                vehicleUpdateCounts: {},
                operatorActivity: {},
                timeRange: {
                    start: startDate.toISOString(),
                    end: endDate.toISOString()
                }
            };

            // –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
            filteredEntries.forEach(entry => {
                if (entry.oldStatus && entry.newStatus) {
                    const transition = `${entry.oldStatus} ‚Üí ${entry.newStatus}`;
                    stats.statusTransitions[transition] = (stats.statusTransitions[transition] || 0) + 1;
                }

                if (entry.carName) {
                    stats.vehicleUpdateCounts[entry.carName] = (stats.vehicleUpdateCounts[entry.carName] || 0) + 1;
                }

                if (entry.operator) {
                    stats.operatorActivity[entry.operator] = (stats.operatorActivity[entry.operator] || 0) + 1;
                }
            });

            return stats;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    /**
     * –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
     * @param {number} daysToKeep - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
     * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async archiveOldLogs(daysToKeep = 90) {
        try {
            await this.setupPromise;
            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

            const entries = await this.readJsonLogs();
            const recentEntries = entries.filter(entry => 
                new Date(entry.timestamp) >= cutoffDate
            );

            const archivedEntries = entries.filter(entry => 
                new Date(entry.timestamp) < cutoffDate
            );

            if (archivedEntries.length > 0) {
                // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–π —Ñ–∞–π–ª
                const archiveFile = path.join(this.logDir, `archived_${Date.now()}.json`);
                await fs.writeFile(archiveFile, archivedEntries.map(e => JSON.stringify(e)).join('\n'), 'utf8');

                // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
                await fs.writeFile(this.jsonLogFile, recentEntries.map(e => JSON.stringify(e)).join('\n'), 'utf8');

                console.log(`üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${archivedEntries.length} –∑–∞–ø–∏—Å–µ–π –≤ ${archiveFile}`);
            }

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤:', error);
            return false;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–∞–∫–µ—Ç–∞
     * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–∞–∫–µ—Ç–∞
     */
    generateBatchId() {
        const timestamp = Date.now().toString(36);
        const random = Math.random().toString(36).substr(2, 6);
        return `batch_${timestamp}_${random}`;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–æ–≥–æ–≤ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é!)
     * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    async clearAllLogs() {
        try {
            await this.setupPromise;
            await fs.writeFile(this.logFile, '', 'utf8');
            await fs.writeFile(this.jsonLogFile, '', 'utf8');
            console.log('üóëÔ∏è  –í—Å–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤:', error);
            return false;
        }
    }
}

module.exports = AuditLogger;