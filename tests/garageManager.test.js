const GarageManager = require('../src/components/GarageManager');
const Garage = require('../src/database/models/garage');
const GarageRequest = require('../src/database/models/garageRequest');
const User = require('../src/database/models/user');

// Mock –±–æ—Ç–∞
const mockBot = {
    sendMessage: jest.fn(),
    sendPhoto: jest.fn(),
    editMessageText: jest.fn(),
    answerCallbackQuery: jest.fn(),
    getFile: jest.fn(),
    downloadFile: jest.fn()
};

// Mock –º–æ–¥—É–ª–µ–π
jest.mock('../src/database/models/garage');
jest.mock('../src/database/models/garageRequest');
jest.mock('../src/database/models/user');
jest.mock('fs');

describe('GarageManager', () => {
    let garageManager;
    const ADMIN_ID = 123456789;

    beforeEach(() => {
        garageManager = new GarageManager(mockBot, ADMIN_ID);
        jest.clearAllMocks();
    });

    describe('constructor', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è', () => {
            expect(garageManager.bot).toBe(mockBot);
            expect(garageManager.adminId).toBe(ADMIN_ID);
            expect(garageManager.userSessions).toBeInstanceOf(Map);
            expect(garageManager.STATES).toHaveProperty('AWAITING_PHOTO');
        });
    });

    describe('handleTakeCarCommand', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≥–∞—Ä–∞–∂–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: 67890 }
            };

            const mockUser = { id: 1, isAuthorized: () => true };
            User.findByTelegramId.mockResolvedValue(mockUser);

            const mockCarsData = {
                cars: [
                    { car_id: 1, car_name: 'Infernus', getDisplayName: () => 'üü¢ Infernus: –•–æ—Ä–æ—à–µ–µ' }
                ],
                pagination: {
                    currentPage: 0,
                    totalPages: 1,
                    hasNext: false,
                    hasPrev: false
                }
            };
            Garage.getCarsPaginated.mockResolvedValue(mockCarsData);

            await garageManager.handleTakeCarCommand(msg);

            expect(User.findByTelegramId).toHaveBeenCalledWith(67890);
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('üöó –ì–ê–†–ê–ñ –°–ï–ú–¨–ò'),
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.any(Array)
                    })
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: 67890 }
            };

            const mockUser = { id: 1, isAuthorized: () => false };
            User.findByTelegramId.mockResolvedValue(mockUser);

            await garageManager.handleTakeCarCommand(msg);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!')
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: 67890 }
            };

            User.findByTelegramId.mockResolvedValue(null);

            await garageManager.handleTakeCarCommand(msg);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!')
            );
        });
    });

    describe('buildGarageKeyboard', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏', () => {
            const cars = [
                { car_id: 1, car_name: 'Infernus' },
                { car_id: 2, car_name: 'Cheetah' },
                { car_id: 3, car_name: 'Banshee' }
            ];
            const pagination = {
                currentPage: 0,
                hasNext: true,
                hasPrev: false
            };

            const keyboard = garageManager.buildGarageKeyboard(cars, pagination);

            expect(keyboard).toHaveLength(3); // 2 —Ä—è–¥–∞ —Å –º–∞—à–∏–Ω–∞–º–∏ + –Ω–∞–≤–∏–≥–∞—Ü–∏—è + –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            expect(keyboard[0]).toHaveLength(2); // –ü–µ—Ä–≤—ã–π —Ä—è–¥: 2 –º–∞—à–∏–Ω—ã
            expect(keyboard[1]).toHaveLength(1); // –í—Ç–æ—Ä–æ–π —Ä—è–¥: 1 –º–∞—à–∏–Ω–∞
            expect(keyboard[2]).toHaveLength(1); // –ù–∞–≤–∏–≥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ "–î–∞–ª–µ–µ"
            expect(keyboard[3]).toHaveLength(1); // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            expect(keyboard[0][0].callback_data).toBe('select_car_1');
            expect(keyboard[0][1].callback_data).toBe('select_car_2');
            expect(keyboard[1][0].callback_data).toBe('select_car_3');
        });
    });

    describe('handleCarSelection', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: 67890 },
                data: 'select_car_1',
                id: 'callback123'
            };

            GarageRequest.countRecentByUser.mockResolvedValue(0);
            const mockCar = { car_id: 1, car_name: 'Infernus', getDisplayName: () => 'üü¢ Infernus: –•–æ—Ä–æ—à–µ–µ' };
            Garage.findById.mockResolvedValue(mockCar);
            
            const mockUser = { id: 1 };
            User.findByTelegramId.mockResolvedValue(mockUser);
            GarageRequest.findByUserAndCar.mockResolvedValue(null);

            await garageManager.handleCarSelection(callbackQuery);

            expect(GarageRequest.countRecentByUser).toHaveBeenCalledWith('67890', 1);
            expect(Garage.findById).toHaveBeenCalledWith(1);
            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback123');
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—ã –º–∞—Å–ª–∞ –¥–ª—è *Infernus*'),
                expect.objectContaining({ parse_mode: 'Markdown' })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞—è–≤–æ–∫', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: 67890 },
                data: 'select_car_1',
                id: 'callback123'
            };

            GarageRequest.countRecentByUser.mockResolvedValue(3);

            await garageManager.handleCarSelection(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: '–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ (3 –≤ —á–∞—Å)',
                    show_alert: true
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–µ', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: 67890 },
                data: 'select_car_1',
                id: 'callback123'
            };

            GarageRequest.countRecentByUser.mockResolvedValue(0);
            const mockCar = { car_id: 1, car_name: 'Infernus' };
            Garage.findById.mockResolvedValue(mockCar);
            
            const mockUser = { id: 1 };
            User.findByTelegramId.mockResolvedValue(mockUser);
            GarageRequest.findByUserAndCar.mockResolvedValue({ id: 1 }); // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞—è–≤–∫–∞

            await garageManager.handleCarSelection(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: expect.stringContaining('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞'),
                    show_alert: true
                })
            );
        });
    });

    describe('handlePageNavigation', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º', async () => {
            const callbackQuery = {
                message: { 
                    chat: { id: 12345 },
                    message_id: 98765 
                },
                data: 'garage_page_1',
                id: 'callback123'
            };

            const mockCarsData = {
                cars: [],
                pagination: { currentPage: 1, totalPages: 2, hasNext: false, hasPrev: true }
            };
            Garage.getCarsPaginated.mockResolvedValue(mockCarsData);

            await garageManager.handlePageNavigation(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback123');
            expect(mockBot.editMessageText).toHaveBeenCalled();
        });
    });

    describe('Session management', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', () => {
            const telegramId = 12345;
            const sessionData = {
                state: garageManager.STATES.AWAITING_PHOTO,
                carId: 1,
                carName: 'Infernus'
            };

            // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
            garageManager.setUserSession(telegramId, sessionData);
            
            // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            const session = garageManager.getUserSession(telegramId);
            expect(session.state).toBe(garageManager.STATES.AWAITING_PHOTO);
            expect(session.carId).toBe(1);
            expect(session.startTime).toBeCloseTo(Date.now(), -1000);

            // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
            garageManager.clearUserSession(telegramId);
            const clearedSession = garageManager.getUserSession(telegramId);
            expect(clearedSession).toBeNull();
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏', () => {
            const telegramId = 12345;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ—à–µ–¥—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            garageManager.userSessions.set(telegramId, {
                state: garageManager.STATES.AWAITING_PHOTO,
                startTime: Date.now() - garageManager.SESSION_TIMEOUT - 1000
            });

            expect(garageManager.userSessions.has(telegramId)).toBe(true);
            
            garageManager.cleanupExpiredSessions();
            
            expect(garageManager.userSessions.has(telegramId)).toBe(false);
        });
    });

    describe('handlePhotoUpload', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: 67890 },
                photo: [{ file_id: 'file123' }]
            };

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            garageManager.setUserSession(67890, {
                state: garageManager.STATES.AWAITING_PHOTO,
                carId: 1,
                carName: 'Infernus'
            });

            const mockUser = { id: 1, telegram_id: 67890 };
            User.findByTelegramId.mockResolvedValue(mockUser);

            const mockRequest = { id: 1 };
            GarageRequest.create.mockResolvedValue(mockRequest);

            // Mock –¥–ª—è savePhotoFile
            garageManager.savePhotoFile = jest.fn().mockResolvedValue('/path/to/photo.jpg');
            garageManager.notifyAdmins = jest.fn().mockResolvedValue();

            await garageManager.handlePhotoUpload(msg);

            expect(garageManager.savePhotoFile).toHaveBeenCalled();
            expect(GarageRequest.create).toHaveBeenCalledWith(
                expect.objectContaining({
                    car_id: 1,
                    user_id: 1,
                    telegram_id: '67890'
                })
            );
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!')
            );
            expect(garageManager.notifyAdmins).toHaveBeenCalledWith(mockRequest);
        });

        test('–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: 67890 },
                photo: [{ file_id: 'file123' }]
            };

            await garageManager.handlePhotoUpload(msg);

            expect(User.findByTelegramId).not.toHaveBeenCalled();
            expect(mockBot.sendMessage).not.toHaveBeenCalled();
        });
    });
});