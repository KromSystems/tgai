/**
 * Unit tests for ProfileFormatter component
 */

const ProfileFormatter = require('../src/components/ProfileFormatter');

describe('ProfileFormatter', () => {
    let profileFormatter;

    beforeEach(() => {
        profileFormatter = new ProfileFormatter();
    });

    describe('Constructor', () => {
        test('should initialize with emoji constants', () => {
            expect(profileFormatter.emojis).toBeDefined();
            expect(profileFormatter.emojis.crown).toBe('üëë');
            expect(profileFormatter.emojis.check).toBe('‚úÖ');
            expect(profileFormatter.emojis.lock).toBe('üîí');
        });
    });

    describe('formatProfileMessage', () => {
        test('should format complete admin profile message', () => {
            const mockProfileData = {
                telegram_id: 12345,
                username: 'admin',
                first_name: 'Admin',
                last_name: 'User',
                language_code: 'ru',
                authorized: 1,
                isAdmin: true,
                profileCompleteness: 100,
                memberSince: '–°–µ–≥–æ–¥–Ω—è',
                lastActivity: '–¢–æ–ª—å–∫–æ —á—Ç–æ',
                statusInfo: {
                    type: 'admin',
                    badge: 'üëë –õ–∏–¥–µ—Ä',
                    emoji: 'üëë',
                    level: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
                },
                authRequest: {
                    hasRequest: false
                }
            };

            const result = profileFormatter.formatProfileMessage(mockProfileData);

            expect(result.message).toContain('üëë <b>Admin User</b>');
            expect(result.message).toContain('üëë –õ–∏–¥–µ—Ä');
            expect(result.message).toContain('üë§ <b>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>');
            expect(result.message).toContain('üìä <b>–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è</b>');
            expect(result.message).toContain('üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏</b>');
            expect(result.parseMode).toBe('HTML');
            expect(result.keyboard).toBeDefined();
            expect(result.keyboard.inline_keyboard).toBeDefined();
        });

        test('should format complete authorized user profile message', () => {
            const mockProfileData = {
                telegram_id: 67890,
                username: 'user',
                first_name: 'Test',
                last_name: 'User',
                language_code: 'en',
                authorized: 1,
                isAdmin: false,
                profileCompleteness: 80,
                memberSince: '3 –¥–Ω—è –Ω–∞–∑–∞–¥',
                lastActivity: '2 —á –Ω–∞–∑–∞–¥',
                statusInfo: {
                    type: 'authorized',
                    badge: '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                    emoji: '‚úÖ',
                    level: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                },
                authRequest: {
                    hasRequest: false
                }
            };

            const result = profileFormatter.formatProfileMessage(mockProfileData);

            expect(result.message).toContain('‚úÖ <b>Test User</b>');
            expect(result.message).toContain('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            expect(result.message).toContain('‚úÖ <b>–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞</b>');
            expect(result.message).toContain('üá∫üá∏ English');
            expect(result.keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' })
            );
        });

        test('should format complete unauthorized user profile message', () => {
            const mockProfileData = {
                telegram_id: 99999,
                username: 'newbie',
                first_name: 'New',
                last_name: null,
                language_code: 'ru',
                authorized: 0,
                isAdmin: false,
                profileCompleteness: 60,
                memberSince: '–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥',
                lastActivity: '–í—á–µ—Ä–∞',
                statusInfo: {
                    type: 'unauthorized',
                    badge: 'üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                    emoji: 'üîí',
                    level: '–ù–æ–≤–∏—á–æ–∫'
                },
                authRequest: {
                    hasRequest: true,
                    status: 'pending'
                }
            };

            const result = profileFormatter.formatProfileMessage(mockProfileData);

            expect(result.message).toContain('üîí <b>New</b>');
            expect(result.message).toContain('üîí –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            expect(result.message).toContain('üîí <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>');
            expect(result.message).toContain('–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è');
            expect(result.keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üîê –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' })
            );
        });

        test('should handle error in message formatting', () => {
            const invalidProfileData = null;

            expect(() => profileFormatter.formatProfileMessage(invalidProfileData))
                .toThrow('Failed to format profile message');
        });
    });

    describe('buildInteractiveKeyboard', () => {
        test('should build admin keyboard', () => {
            const profileData = {
                statusInfo: { type: 'admin' },
                isAdmin: true
            };

            const keyboard = profileFormatter.buildInteractiveKeyboard(profileData);

            expect(keyboard.inline_keyboard).toHaveLength(2);
            expect(keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏' })
            );
            expect(keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞' })
            );
            expect(keyboard.inline_keyboard[1]).toContainEqual(
                expect.objectContaining({ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏' })
            );
        });

        test('should build authorized user keyboard', () => {
            const profileData = {
                statusInfo: { type: 'authorized' },
                isAdmin: false
            };

            const keyboard = profileFormatter.buildInteractiveKeyboard(profileData);

            expect(keyboard.inline_keyboard).toHaveLength(2);
            expect(keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' })
            );
            expect(keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' })
            );
        });

        test('should build unauthorized user keyboard', () => {
            const profileData = {
                statusInfo: { type: 'unauthorized' },
                isAdmin: false
            };

            const keyboard = profileFormatter.buildInteractiveKeyboard(profileData);

            expect(keyboard.inline_keyboard).toHaveLength(2);
            expect(keyboard.inline_keyboard[0]).toContainEqual(
                expect.objectContaining({ text: 'üîê –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É' })
            );
            expect(keyboard.inline_keyboard[1]).toContainEqual(
                expect.objectContaining({ text: '‚ùì –ü–æ–º–æ—â—å' })
            );
        });
    });

    describe('getDisplayName', () => {
        test('should return full name when available', () => {
            const profileData = { first_name: 'John', last_name: 'Doe' };
            const result = profileFormatter.getDisplayName(profileData);
            expect(result).toBe('John Doe');
        });

        test('should return first name only when last name missing', () => {
            const profileData = { first_name: 'John', last_name: null };
            const result = profileFormatter.getDisplayName(profileData);
            expect(result).toBe('John');
        });

        test('should return username when name missing', () => {
            const profileData = { 
                first_name: null, 
                last_name: null, 
                username: 'johndoe',
                telegram_id: 12345
            };
            const result = profileFormatter.getDisplayName(profileData);
            expect(result).toBe('@johndoe');
        });

        test('should return fallback when all data missing', () => {
            const profileData = { 
                first_name: null, 
                last_name: null, 
                username: null,
                telegram_id: 12345 
            };
            const result = profileFormatter.getDisplayName(profileData);
            expect(result).toBe('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 12345');
        });
    });

    describe('getUsername', () => {
        test('should return username with @ prefix', () => {
            const profileData = { username: 'johndoe' };
            const result = profileFormatter.getUsername(profileData);
            expect(result).toBe('@johndoe');
        });

        test('should return fallback when username missing', () => {
            const profileData = { username: null };
            const result = profileFormatter.getUsername(profileData);
            expect(result).toBe('<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>');
        });
    });

    describe('getFullName', () => {
        test('should return full name when both names available', () => {
            const profileData = { first_name: 'John', last_name: 'Doe' };
            const result = profileFormatter.getFullName(profileData);
            expect(result).toBe('John Doe');
        });

        test('should return first name only when last name missing', () => {
            const profileData = { first_name: 'John', last_name: null };
            const result = profileFormatter.getFullName(profileData);
            expect(result).toBe('John');
        });

        test('should return fallback when both names missing', () => {
            const profileData = { first_name: null, last_name: null };
            const result = profileFormatter.getFullName(profileData);
            expect(result).toBe('<i>–ù–µ —É–∫–∞–∑–∞–Ω–æ</i>');
        });
    });

    describe('getLanguageDisplay', () => {
        test('should return Russian display name', () => {
            const result = profileFormatter.getLanguageDisplay('ru');
            expect(result).toBe('üá∑üá∫ –†—É—Å—Å–∫–∏–π');
        });

        test('should return English display name', () => {
            const result = profileFormatter.getLanguageDisplay('en');
            expect(result).toBe('üá∫üá∏ English');
        });

        test('should return Ukrainian display name', () => {
            const result = profileFormatter.getLanguageDisplay('uk');
            expect(result).toBe('üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞');
        });

        test('should return unknown language code as is', () => {
            const result = profileFormatter.getLanguageDisplay('unknown');
            expect(result).toBe('unknown');
        });

        test('should return fallback for null language code', () => {
            const result = profileFormatter.getLanguageDisplay(null);
            expect(result).toBe('<i>–ù–µ —É–∫–∞–∑–∞–Ω</i>');
        });
    });

    describe('formatAuthRequestStatus', () => {
        test('should format pending status', () => {
            const authRequest = { hasRequest: true, status: 'pending' };
            const result = profileFormatter.formatAuthRequestStatus(authRequest);
            expect(result).toBe('–û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è');
        });

        test('should format approved status', () => {
            const authRequest = { hasRequest: true, status: 'approved' };
            const result = profileFormatter.formatAuthRequestStatus(authRequest);
            expect(result).toBe('–û–¥–æ–±—Ä–µ–Ω–∞');
        });

        test('should format rejected status', () => {
            const authRequest = { hasRequest: true, status: 'rejected' };
            const result = profileFormatter.formatAuthRequestStatus(authRequest);
            expect(result).toBe('–û—Ç–∫–ª–æ–Ω–µ–Ω–∞');
        });

        test('should format no request status', () => {
            const authRequest = { hasRequest: false };
            const result = profileFormatter.formatAuthRequestStatus(authRequest);
            expect(result).toBe('–ù–µ –ø–æ–¥–∞–Ω–∞');
        });

        test('should handle unknown status', () => {
            const authRequest = { hasRequest: true, status: 'unknown' };
            const result = profileFormatter.formatAuthRequestStatus(authRequest);
            expect(result).toBe('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        });
    });

    describe('formatProfileCompleteness', () => {
        test('should format 100% completeness with full progress bar', () => {
            const result = profileFormatter.formatProfileCompleteness(100);
            expect(result).toBe('100% [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]');
        });

        test('should format 50% completeness with half progress bar', () => {
            const result = profileFormatter.formatProfileCompleteness(50);
            expect(result).toBe('50% [‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë]');
        });

        test('should format 0% completeness with empty progress bar', () => {
            const result = profileFormatter.formatProfileCompleteness(0);
            expect(result).toBe('0% [‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë]');
        });
    });

    describe('formatSimpleProfile', () => {
        test('should format simple profile for fallback', () => {
            const profileData = {
                first_name: 'John',
                last_name: 'Doe',
                memberSince: '–í—á–µ—Ä–∞',
                lastActivity: '–¢–æ–ª—å–∫–æ —á—Ç–æ',
                statusInfo: {
                    emoji: '‚úÖ',
                    badge: '‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω',
                    level: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                }
            };

            const result = profileFormatter.formatSimpleProfile(profileData);

            expect(result).toContain('‚úÖ John Doe');
            expect(result).toContain('–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            expect(result).toContain('–£—Ä–æ–≤–µ–Ω—å: –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
            expect(result).toContain('–£—á–∞—Å—Ç–Ω–∏–∫ —Å: –í—á–µ—Ä–∞');
            expect(result).toContain('–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –¢–æ–ª—å–∫–æ —á—Ç–æ');
        });
    });

    describe('formatErrorMessage', () => {
        test('should format error message', () => {
            const errorMessage = 'Database connection failed';
            const result = profileFormatter.formatErrorMessage(errorMessage);

            expect(result).toContain('‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>');
            expect(result).toContain('–ü—Ä–∏—á–∏–Ω–∞: Database connection failed');
            expect(result).toContain('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
        });
    });

    describe('getProfileStats', () => {
        test('should return profile statistics', () => {
            const profileData = {
                profileCompleteness: 80,
                first_name: 'John',
                username: 'johndoe',
                created_at: '2023-01-01T00:00:00Z'
            };

            const stats = profileFormatter.getProfileStats(profileData);

            expect(stats).toEqual({
                completeness: 80,
                fieldsCompleted: 4,
                totalFields: 5,
                hasAvatar: true,
                hasUsername: true,
                memberDays: expect.any(Number)
            });
        });
    });

    describe('calculateMemberDays', () => {
        test('should calculate member days correctly', () => {
            const yesterday = new Date();
            yesterday.setDate(yesterday.getDate() - 1);
            
            const days = profileFormatter.calculateMemberDays(yesterday.toISOString());
            
            expect(days).toBe(1);
        });

        test('should return 0 for invalid date', () => {
            const days = profileFormatter.calculateMemberDays(null);
            expect(days).toBe(0);
        });

        test('should handle date parsing errors', () => {
            const days = profileFormatter.calculateMemberDays('invalid-date');
            expect(days).toBe(0);
        });
    });
});