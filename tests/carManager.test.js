const CarManager = require('../src/components/CarManager');
const Garage = require('../src/database/models/garage');
const GarageRequest = require('../src/database/models/garageRequest');
const User = require('../src/database/models/user');

// Mock –±–æ—Ç–∞
const mockBot = {
    sendMessage: jest.fn(),
    sendPhoto: jest.fn(),
    editMessageText: jest.fn(),
    answerCallbackQuery: jest.fn(),
    deleteMessage: jest.fn()
};

// Mock –º–æ–¥—É–ª–µ–π
jest.mock('../src/database/models/garage');
jest.mock('../src/database/models/garageRequest');
jest.mock('../src/database/models/user');

describe('CarManager', () => {
    let carManager;
    const ADMIN_ID = 123456789;
    const NON_ADMIN_ID = 987654321;

    beforeEach(() => {
        carManager = new CarManager(mockBot, ADMIN_ID);
        jest.clearAllMocks();
    });

    describe('constructor', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è', () => {
            expect(carManager.bot).toBe(mockBot);
            expect(carManager.adminIds).toEqual([ADMIN_ID]);
            expect(carManager.adminSessions).toBeInstanceOf(Map);
            expect(carManager.ADMIN_STATES).toHaveProperty('AWAITING_CAR_NAME');
            expect(carManager.ADMIN_MESSAGES).toHaveProperty('ACCESS_DENIED');
        });

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤', () => {
            const multiAdminCarManager = new CarManager(mockBot, [ADMIN_ID, NON_ADMIN_ID]);
            expect(multiAdminCarManager.adminIds).toEqual([ADMIN_ID, NON_ADMIN_ID]);
        });
    });

    describe('isAdmin', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', () => {
            expect(carManager.isAdmin(ADMIN_ID)).toBe(true);
            expect(carManager.isAdmin(NON_ADMIN_ID)).toBe(false);
        });
    });

    describe('handleGarageAdminCommand', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: ADMIN_ID }
            };

            const mockStats = {
                total: 20,
                '–•–æ—Ä–æ—à–µ–µ': 8,
                '–°—Ä–µ–¥–Ω–µ–µ': 7,
                '–ü–ª–æ—Ö–æ–µ': 5
            };
            Garage.getStatistics.mockResolvedValue(mockStats);
            GarageRequest.countByStatus.mockResolvedValue(3);

            await carManager.handleGarageAdminCommand(msg);

            expect(Garage.getStatistics).toHaveBeenCalled();
            expect(GarageRequest.countByStatus).toHaveBeenCalledWith('–ù–µ –≤—ã–ø–ª–∞—á–µ–Ω–æ');
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ì–ê–†–ê–ñ–ê'),
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.any(Array)
                    })
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: NON_ADMIN_ID }
            };

            await carManager.handleGarageAdminCommand(msg);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                carManager.ADMIN_MESSAGES.ACCESS_DENIED
            );
        });
    });

    describe('buildAdminKeyboard', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', () => {
            const keyboard = carManager.buildAdminKeyboard(5);

            expect(keyboard).toHaveLength(3);
            expect(keyboard[0]).toHaveLength(2); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            expect(keyboard[1]).toHaveLength(2); // –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ –∏ –ó–∞—è–≤–∫–∏
            expect(keyboard[2]).toHaveLength(1); // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            expect(keyboard[0][0].text).toBe('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            expect(keyboard[0][1].text).toBe('üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ');
            expect(keyboard[1][0].text).toBe('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ');
            expect(keyboard[1][1].text).toBe('üìã –ó–∞—è–≤–∫–∏ (5)');
        });

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –±–µ–∑ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç', () => {
            const keyboard = carManager.buildAdminKeyboard(0);
            
            expect(keyboard[1][1].text).toBe('üìã –ó–∞—è–≤–∫–∏');
        });
    });

    describe('showCarManagement', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', async () => {
            const chatId = 12345;
            const mockCarsData = {
                cars: [
                    { car_id: 1, car_name: 'Infernus', getDisplayName: () => 'üü¢ Infernus: –•–æ—Ä–æ—à–µ–µ' },
                    { car_id: 2, car_name: 'Cheetah', getDisplayName: () => 'üü° Cheetah: –°—Ä–µ–¥–Ω–µ–µ' }
                ],
                pagination: {
                    currentPage: 0,
                    totalPages: 1,
                    hasNext: false,
                    hasPrev: false
                }
            };
            Garage.getCarsPaginated.mockResolvedValue(mockCarsData);

            await carManager.showCarManagement(chatId);

            expect(Garage.getCarsPaginated).toHaveBeenCalledWith(0, 5);
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                chatId,
                expect.stringContaining('üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò'),
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.any(Array)
                    })
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –≥–∞—Ä–∞–∂–µ', async () => {
            const chatId = 12345;
            const mockCarsData = {
                cars: [],
                pagination: { currentPage: 0, totalPages: 0 }
            };
            Garage.getCarsPaginated.mockResolvedValue(mockCarsData);

            await carManager.showCarManagement(chatId);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                chatId,
                'üöó –ì–∞—Ä–∞–∂ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å.',
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.arrayContaining([
                            expect.arrayContaining([
                                expect.objectContaining({ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ' })
                            ])
                        ])
                    })
                })
            );
        });
    });

    describe('buildCarManagementKeyboard', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏', () => {
            const cars = [
                { car_id: 1, car_name: 'Infernus' },
                { car_id: 2, car_name: 'Cheetah' },
                { car_id: 3, car_name: 'Banshee' }
            ];
            const pagination = {
                currentPage: 0,
                hasNext: true,
                hasPrev: false
            };

            const keyboard = carManager.buildCarManagementKeyboard(cars, pagination);

            expect(keyboard).toHaveLength(4); // 2 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è + –Ω–∞–≤–∏–≥–∞—Ü–∏—è + –Ω–∏–∂–Ω–∏–π —Ä—è–¥
            expect(keyboard[0]).toHaveLength(2); // –ü–µ—Ä–≤—ã–π —Ä—è–¥: 2 –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            expect(keyboard[1]).toHaveLength(1); // –í—Ç–æ—Ä–æ–π —Ä—è–¥: 1 –∫–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            expect(keyboard[2]).toHaveLength(1); // –ù–∞–≤–∏–≥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ "–î–∞–ª–µ–µ"
            expect(keyboard[3]).toHaveLength(2); // –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ + –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

            expect(keyboard[0][0].callback_data).toBe('admin_edit_1');
            expect(keyboard[0][1].callback_data).toBe('admin_edit_2');
            expect(keyboard[1][0].callback_data).toBe('admin_edit_3');
        });
    });

    describe('handleCarEdit', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 }, message_id: 456 },
                data: 'admin_edit_1',
                id: 'callback123'
            };

            const mockCar = {
                car_id: 1,
                car_name: 'Infernus',
                getDisplayName: () => 'üü¢ Infernus: –•–æ—Ä–æ—à–µ–µ',
                last_maintenance: new Date().toISOString()
            };
            Garage.findById.mockResolvedValue(mockCar);

            await carManager.handleCarEdit(callbackQuery);

            expect(Garage.findById).toHaveBeenCalledWith(1);
            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback123');
            expect(mockBot.editMessageText).toHaveBeenCalledWith(
                expect.stringContaining('üöó –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø'),
                expect.objectContaining({
                    chat_id: 12345,
                    message_id: 456,
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.arrayContaining([
                            expect.arrayContaining([
                                expect.objectContaining({ text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å' }),
                                expect.objectContaining({ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ' })
                            ])
                        ])
                    })
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                data: 'admin_edit_999',
                id: 'callback123'
            };

            Garage.findById.mockResolvedValue(null);

            await carManager.handleCarEdit(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: carManager.ADMIN_MESSAGES.CAR_NOT_FOUND,
                    show_alert: true
                })
            );
        });
    });

    describe('buildStatusKeyboard', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞', () => {
            const keyboard = carManager.buildStatusKeyboard(1);

            expect(keyboard).toHaveLength(4);
            expect(keyboard[0][0].text).toBe('üü¢ –•–æ—Ä–æ—à–µ–µ');
            expect(keyboard[1][0].text).toBe('üü° –°—Ä–µ–¥–Ω–µ–µ');
            expect(keyboard[2][0].text).toBe('üî¥ –ü–ª–æ—Ö–æ–µ');
            expect(keyboard[3][0].text).toBe('‚ùå –û—Ç–º–µ–Ω–∞');

            expect(keyboard[0][0].callback_data).toBe('admin_set_status_1_–•–æ—Ä–æ—à–µ–µ');
            expect(keyboard[1][0].callback_data).toBe('admin_set_status_1_–°—Ä–µ–¥–Ω–µ–µ');
            expect(keyboard[2][0].callback_data).toBe('admin_set_status_1_–ü–ª–æ—Ö–æ–µ');
        });
    });

    describe('handleSetStatus', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 }, message_id: 456 },
                data: 'admin_set_status_1_–°—Ä–µ–¥–Ω–µ–µ',
                id: 'callback123'
            };

            const mockCar = {
                car_id: 1,
                car_name: 'Infernus',
                getDisplayName: () => 'üü° Infernus: –°—Ä–µ–¥–Ω–µ–µ',
                last_maintenance: new Date().toISOString()
            };
            Garage.findById.mockResolvedValue(mockCar);
            Garage.updateStatus.mockResolvedValue();

            await carManager.handleSetStatus(callbackQuery);

            expect(Garage.findById).toHaveBeenCalledWith(1);
            expect(Garage.updateStatus).toHaveBeenCalledWith(1, '–°—Ä–µ–¥–Ω–µ–µ');
            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: expect.stringContaining('–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è "Infernus" –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –°—Ä–µ–¥–Ω–µ–µ'),
                    show_alert: false
                })
            );
        });
    });

    describe('handleAddCar', () => {
        test('–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 }, message_id: 456 },
                from: { id: ADMIN_ID },
                id: 'callback123'
            };

            await carManager.handleAddCar(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback123');
            expect(mockBot.editMessageText).toHaveBeenCalledWith(
                carManager.ADMIN_MESSAGES.ENTER_CAR_NAME,
                expect.objectContaining({
                    chat_id: 12345,
                    message_id: 456,
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.arrayContaining([
                            expect.arrayContaining([
                                expect.objectContaining({ text: '‚ùå –û—Ç–º–µ–Ω–∞' })
                            ])
                        ])
                    })
                })
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            const session = carManager.getAdminSession(ADMIN_ID);
            expect(session).toBeTruthy();
            expect(session.state).toBe(carManager.ADMIN_STATES.AWAITING_CAR_NAME);
        });
    });

    describe('processNewCarName', () => {
        beforeEach(() => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            carManager.setAdminSession(ADMIN_ID, {
                state: carManager.ADMIN_STATES.AWAITING_CAR_NAME,
                messageId: 456
            });
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: ADMIN_ID },
                text: 'Lamborghini',
                message_id: 789
            };

            await carManager.processNewCarName(msg);

            const session = carManager.getAdminSession(ADMIN_ID);
            expect(session.carName).toBe('Lamborghini');
            expect(session.state).toBe('awaiting_status_selection');

            expect(mockBot.deleteMessage).toHaveBeenCalledTimes(2); // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('üé® –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:'),
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.any(Array)
                    })
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: ADMIN_ID },
                text: '   ',
                message_id: 789
            };

            await carManager.processNewCarName(msg);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ', async () => {
            const msg = {
                chat: { id: 12345 },
                from: { id: ADMIN_ID },
                text: 'A'.repeat(51), // 51 —Å–∏–º–≤–æ–ª
                message_id: 789
            };

            await carManager.processNewCarName(msg);

            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:'
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–≤–æ–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏', async () => {
            carManager.clearAdminSession(ADMIN_ID);

            const msg = {
                chat: { id: 12345 },
                from: { id: ADMIN_ID },
                text: 'Lamborghini',
                message_id: 789
            };

            await carManager.processNewCarName(msg);

            expect(mockBot.sendMessage).not.toHaveBeenCalled();
        });
    });

    describe('handleCreateCar', () => {
        beforeEach(() => {
            carManager.setAdminSession(ADMIN_ID, {
                carName: 'Lamborghini',
                state: 'awaiting_status_selection'
            });
        });

        test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: ADMIN_ID },
                data: 'admin_create_car_–•–æ—Ä–æ—à–µ–µ',
                id: 'callback123'
            };

            const mockNewCar = {
                car_id: 21,
                car_name: 'Lamborghini',
                status: '–•–æ—Ä–æ—à–µ–µ'
            };
            Garage.addCar.mockResolvedValue(mockNewCar);

            // Mock –¥–ª—è showAdminMenu
            const mockStats = { total: 21, '–•–æ—Ä–æ—à–µ–µ': 9, '–°—Ä–µ–¥–Ω–µ–µ': 7, '–ü–ª–æ—Ö–æ–µ': 5 };
            Garage.getStatistics.mockResolvedValue(mockStats);
            GarageRequest.countByStatus.mockResolvedValue(0);

            await carManager.handleCreateCar(callbackQuery);

            expect(Garage.addCar).toHaveBeenCalledWith('Lamborghini', '–•–æ—Ä–æ—à–µ–µ');
            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: expect.stringContaining('–ê–≤—Ç–æ–º–æ–±–∏–ª—å "Lamborghini" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!'),
                    show_alert: false
                })
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞
            const session = carManager.getAdminSession(ADMIN_ID);
            expect(session).toBeNull();
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: ADMIN_ID },
                data: 'admin_create_car_–•–æ—Ä–æ—à–µ–µ',
                id: 'callback123'
            };

            Garage.addCar.mockRejectedValue(new Error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'));

            await carManager.handleCreateCar(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: expect.stringContaining('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
                    show_alert: true
                })
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const session = carManager.getAdminSession(ADMIN_ID);
            expect(session).toBeNull();
        });
    });

    describe('handleAdminCallback', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –Ω–µ–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', async () => {
            const callbackQuery = {
                from: { id: NON_ADMIN_ID },
                data: 'admin_menu',
                id: 'callback123'
            };

            await carManager.handleAdminCallback(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith(
                'callback123',
                expect.objectContaining({
                    text: carManager.ADMIN_MESSAGES.ACCESS_DENIED,
                    show_alert: true
                })
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å admin_menu callback', async () => {
            const callbackQuery = {
                message: { chat: { id: 12345 } },
                from: { id: ADMIN_ID },
                data: 'admin_menu',
                id: 'callback123'
            };

            const mockStats = { total: 20, '–•–æ—Ä–æ—à–µ–µ': 8, '–°—Ä–µ–¥–Ω–µ–µ': 7, '–ü–ª–æ—Ö–æ–µ': 5 };
            Garage.getStatistics.mockResolvedValue(mockStats);
            GarageRequest.countByStatus.mockResolvedValue(3);

            await carManager.handleAdminCallback(callbackQuery);

            expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback123');
            expect(mockBot.sendMessage).toHaveBeenCalledWith(
                12345,
                expect.stringContaining('üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ì–ê–†–ê–ñ–ê'),
                expect.objectContaining({
                    reply_markup: expect.objectContaining({
                        inline_keyboard: expect.any(Array)
                    })
                })
            );
        });
    });

    describe('session management', () => {
        test('setAdminSession –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é', () => {
            const sessionData = { state: 'test_state', data: 'test_data' };
            carManager.setAdminSession(ADMIN_ID, sessionData);

            const session = carManager.getAdminSession(ADMIN_ID);
            expect(session).toBeTruthy();
            expect(session.state).toBe('test_state');
            expect(session.data).toBe('test_data');
            expect(session.startTime).toBeTruthy();
        });

        test('getAdminSession –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å null –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏', () => {
            const session = carManager.getAdminSession(999);
            expect(session).toBeNull();
        });

        test('clearAdminSession –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é', () => {
            carManager.setAdminSession(ADMIN_ID, { state: 'test' });
            expect(carManager.getAdminSession(ADMIN_ID)).toBeTruthy();

            carManager.clearAdminSession(ADMIN_ID);
            expect(carManager.getAdminSession(ADMIN_ID)).toBeNull();
        });

        test('cleanupExpiredSessions –¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏', () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            carManager.setAdminSession(ADMIN_ID, { state: 'test' });
            const session = carManager.adminSessions.get(ADMIN_ID);
            session.startTime = Date.now() - (35 * 60 * 1000); // 35 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥

            carManager.cleanupExpiredSessions();

            expect(carManager.getAdminSession(ADMIN_ID)).toBeNull();
        });
    });
});